xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
reg=lm(AirPassengers~time(AirPassengers))
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1])
autoplot(AirPassengers) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
acf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggAcf(AirPassengers)
## Fit the AR model to AirPassengers
## Note for reference that an AR model is an ARIMA(1, 0, 0) model.
AR <- arima(AirPassengers, order = c(1,0,0))
print(AR)
?autoplot
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
install.packages("ggfortify")
library(zoo)
library(tseries)
library(ggplot2)
library(ggfortify)
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red"))
#Using predict() to make a 1-step forecast
predict_AR <- predict(AR)
#Obtaining the 1-step forecast using $pred[1]
predict_AR$pred[1]
#ALternatively Using predict to make 1-step through 10-step forecasts
predict(AR, n.ahead = 10)
MA <- arima(AirPassengers, order = c(0,0,1))
print(MA)
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue"))
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue")) +
ggtitle("Plotting the series along with the MA fitted values") +
xlab("Year") +
ylab("Number of Passengers")
# Find correlation between AR_fit and MA_fit
cor(AR_fit, MA_fit)
MA_fit <- AirPassengers - resid(MA)
cor(AR_fit, MA_fit)
AIC(MA)
BIC(AR)
install.packages("bayess")
library(bayess)
demo(Chapter.1)
vnames=names(caterpillar)
par(mfrow=c(2,4),mar=c(4.2,2,2,1.2))
for (i in 1:8) plot(X[,i],y,xlab=vnames[i],pch=19,
col="sienna4",xaxt="n",yaxt="n")
## Demo code https://rdrr.io/cran/bayess/f/
data(caterpillar)
y=log(caterpillar$y)
X=as.matrix(caterpillar[,1:8])
vnames=names(caterpillar)
par(mfrow=c(2,4),mar=c(4.2,2,2,1.2))
for (i in 1:8) plot(X[,i],y,xlab=vnames[i],pch=19,
col="sienna4",xaxt="n",yaxt="n")
library(bayess)
data(caterpillar)
X=scale(X)
summary(lm(y~X))
S=readline(prompt="Type  <Return>   to continue : ")
y=log(caterpillar$y)
X=as.matrix(caterpillar[,1:8])
data(caterpillar)
X=scale(X)
summary(lm(y~X))
S=readline(prompt="Type  <Return>   to continue : ")
library("xlsx")
install.packages("xlsx")
library("xlsx")
read.xlsx2("results-text.xlsx", sheetIndex, header=TRUE, colClasses="character")
library(readxl)
Project_full <- read_excel("results-text.xlsx")
read.xlsx2("./results-text.xlsx", sheetIndex, header=TRUE, colClasses="character")
Project_full <- read_excel("C:\\Users\\zbai\\Documents\\GitHub\\R-Projects\\SAS\\Yimengresults-text.xlsx")
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimengresults-text.xlsx")
?read_excel
Project_full <- read_excel(readxl_example("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimengresults-text.xlsx"))
Project_full <- read_excel(readxl_example("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx"))
library(readxl)
Project_full <- results_text <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
Project_full$ImpfZust
Project1 <- subset(Project_full,"ImpfZust")
?subset
Project1 <- subset(Project_full,ImpfZust)
Project1 <- subset(Project_full,c(ImpfZust))
Project1 <- subset(Project_full,select = c(ImpfZust))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
ImpGrund[beruf],ImpGrund[risiko],ImpGrund[norm],
ImpGrund[gesfam],ImpGrund[sozum],ImpGrund[gesell],
ImpGrund[geswesent]))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
sex, age,
Schulab, BerufAb, ErwerbStat, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, ErwerbStat, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo))
Project_full$`GesuwiEin[Bund]`
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GeszwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk))
str(Project1)
table(Project1$`Anam[HepB]`)
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja","Ja","Nein")
table(Project1$ImpfHistory)
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja","Nein")
table(Project1$ImpfHistory)
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,
`Anam[Keine]`))
table(Project1$`GesuwiEin[Bund]`)
library(discSurv) #discrete-time survival analysis tool kit
## https://www.rensvandeschoot.com/tutorials/discrete-time-survival/
data("scania")
head(scania)
Scania_Person <- scania %>%
mutate(exit = ceiling(exit),
birthdate = floor(birthdate),
spell = exit - enter) %>% #spell refers to the observed duration of a person
mutate(enter = enter - 50,
exit = exit - 50)
library(eha) #for the data sets used in this tutorial
data("scania")
head(scania)
Scania_Person <- scania %>%
mutate(exit = ceiling(exit),
birthdate = floor(birthdate),
spell = exit - enter) %>% #spell refers to the observed duration of a person
mutate(enter = enter - 50,
exit = exit - 50)
library(lme4) # for multilevel models
library(tidyverse) # for data manipulation and plots
library(effects) #for plotting parameter effects
library(jtools) #for transformaing model summaries
library(eha) #for the data sets used in this tutorial
library(discSurv) #discrete-time survival analysis tool kit
## https://www.rensvandeschoot.com/tutorials/discrete-time-survival/
data("scania")
head(scania)
Scania_Person <- scania %>%
mutate(exit = ceiling(exit),
birthdate = floor(birthdate),
spell = exit - enter) %>% #spell refers to the observed duration of a person
mutate(enter = enter - 50,
exit = exit - 50)
head(Scania_Person)
### Person-Period Format
#convert the training set
Scania_PersonPeriod_Train <- dataLong(dataSet = Scania_Person_Train,
timeColumn = "spell",
censColumn = "event",
timeAsFactor = F) %>%
as_tibble() %>%
mutate(enter = timeInt - 1,
age = enter + 50) %>%
select(-obj, -event, -exit) %>%
rename(event = y,
exit = timeInt) %>%
mutate(year = age + birthdate) %>%
select(id, enter, exit, event, everything()) %>%
left_join(logrye, by = "year") #joined with the `logrye` data for a variable on yearly food prices
###  Divide Data into Training (80%) and Test (20%) Sets
set.seed(123)
Scania_Person_Train <- sample_frac(Scania_Person, 0.8)
Scania_Person_Test <- Scania_Person[!Scania_Person$id %in% Scania_Person_Train$id,]
### Person-Period Format
#convert the training set
Scania_PersonPeriod_Train <- dataLong(dataSet = Scania_Person_Train,
timeColumn = "spell",
censColumn = "event",
timeAsFactor = F) %>%
as_tibble() %>%
mutate(enter = timeInt - 1,
age = enter + 50) %>%
select(-obj, -event, -exit) %>%
rename(event = y,
exit = timeInt) %>%
mutate(year = age + birthdate) %>%
select(id, enter, exit, event, everything()) %>%
left_join(logrye, by = "year") #joined with the `logrye` data for a variable on yearly food prices
#convert the test set
Scania_PersonPeriod_Test <- dataLong(dataSet = Scania_Person_Test,
timeColumn = "spell",
censColumn = "event",
timeAsFactor = F) %>%
as_tibble() %>%
mutate(enter = timeInt - 1,
age = enter + 50) %>%
select(-obj, -event, -exit) %>%
rename(event = y,
exit = timeInt) %>%
mutate(year = age + birthdate) %>%
select(id, enter, exit, event, everything()) %>%
left_join(logrye, by = "year")
### Gompertz Regression
Scania_PersonPeriod_Train %>%
group_by(exit) %>%
summarise(event = sum(event),
total = n()) %>%
mutate(hazard = event/total) %>%
ggplot(aes(x = exit, y = log(-log(1-hazard)))) +
geom_point() +
geom_smooth()
Gompertz_Model_Baseline <- glm(formula = event ~ exit,
family = binomial(link = "cloglog"),
data = Scania_PersonPeriod_Train)
summary(Gompertz_Model_Baseline)
tab_model(Gompertz_Model_Baseline)
library(sjPlot)
tab_model(Gompertz_Model_Baseline)
### To ease the interpretaion, we can exponentiate the model estimates, using the summ function from the jtools package.
### exp = T means that we want exponentiated estimates
summ(Gompertz_Model_Baseline, exp = T)
Gompertz_Model_Full <- glm(formula = event ~ exit + sex + ses + immigrant + foodprices,
family = binomial(link = "cloglog"),
data = Scania_PersonPeriod_Train)
summ(Gompertz_Model_Full, exp = T)
## visualise the parameter effect
plot(allEffects(Gompertz_Model_Full))
## Model Evaluation: Goodness of Fit
## Likelihood Ratio Test
anova(Gompertz_Model_Baseline, Gompertz_Model_Full, test ="Chisq")
Data_DevResid <- tibble(Pred_Haz = predict(Gompertz_Model_Full, type = "response"),
Event = pull(Scania_PersonPeriod_Train, event),
ID = pull(Scania_PersonPeriod_Train, id)) %>%
mutate(DevRes = if_else(Event == 0,
-sqrt(-2*log(1-Pred_Haz)),
sqrt(-2*log(Pred_Haz))))
Data_DevResid %>%
ggplot(aes(x = ID, y = DevRes)) +
geom_point()
### Prediction Error Curves
### Prediction Error (PE) curves (PE(t)) are a time-dependent measure of prediction error based on the squared distance between the predicted individual survival functions
#calculate 1 - predicted hazards
OneMinusPredHaz <- 1 - predict(Gompertz_Model_Full,
newdata = Scania_PersonPeriod_Test,
type = "response")
#calculate individual predicted survival curves
PredSurv <- aggregate(formula = OneMinusPredHaz ~ id,
data = Scania_PersonPeriod_Test,
FUN=cumprod)
#PE curves for all the 30 time points in the data
PredErrCurve <- predErrDiscShort(timepoints = 1:30,
estSurvList = PredSurv[[2]], #survival curves
newTime = Scania_Person_Test$exit, #time points in the test set
newEvent = Scania_Person_Test$event, #event in the test set
trainTime = Scania_Person_Train$exit, #time points in the training set
trainEvent = Scania_Person_Train$event) #event in the training set
#plot the PE curve
tibble(PE = PredErrCurve$Output$predErr) %>%
mutate(exit = row_number()) %>%
ggplot(aes(y = PE, x = exit)) +
geom_point() +
geom_line(lty = "dashed") +
geom_hline(yintercept = 0.25)
2700&30
25*6
### R Version
paste(R.Version()[c("major", "minor")], collapse = ".")
library(clinfun)
library(survival)
data(pbc)
pbc1 <- pbc
pbc1$trt[pbc1$trt == -9] <- NA
pbc1$copper[pbc1$copper == -9] <- NA
calogrank(pbc1$time, pbc1$status, pbc1$trt, pbc1[,c("copper")])
calogrank(pbc1$time, pbc1$status, pbc1$trt,
pbc1[,c("protime", "copper")])
library(clinfun)
p1=0.15
p2=0.07
fe.ssize(p1, p2, alpha=0.05, power=0.8, r=1, npm=5, mmax=1000)
CPS.ssize(p1, p2, alpha=0.05, power=0.8, r=1)
fe.mdor(ncase=120, ncontrol=120, pcontrol=0.15, alpha=0.05, power=0.8)1
fe.mdor(ncase=120, ncontrol=120, pcontrol=0.15, alpha=0.05, power=0.8)
### fe.power returns a Kx2 matrix with probabilities (p2) and exact power
fe.power(d=0.5, n1=150, n2=160, p1=0.15, alpha = 0.05)
### fe.power returns a Kx2 matrix with probabilities (p2) and exact power
fe.power(d=0.5, n1=50, n2=60, p1=0.15, alpha = 0.05)
library(clinfun)
set.seed(1234)
g <- rep(1:5, rep(10,5))
x <- rnorm(50)
jonckheere.test(x+0.3*g, g)
library("clinfun")
Simon <- ph2simon(0.2, 0.35, 0.05, 0.05, nmax=150)
Simon
plot(Simon)
plot(Simon)
?pbinom
pbinom(1,21,0.05)
pbinom(2,21,0.05)
pbinom(1,21,0.95)
pbinom(20,21,0.95)
pbinom(2,21,0.05)
pbinom(2,0.05,21)
pbinom(2,21,2/21)
pbinom(1,21,1/21)
pbinom(1,21,0.05)
