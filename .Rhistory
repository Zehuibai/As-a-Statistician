caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.002,0.003,0.0001),p0=0.05,h1="less",corr=0.387, power=0.99)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 99% power")
88*92
EP2 <- one_propotion(seq=seq(0.01,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.92)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
.94*.9
.94*.99
?binom.confint
binom.confint(x=0.01*255, n= 255, conf.level = 0.95, method = c("asymptotic"))
?binom.power
binom.power(p.alt=0.015, n=196, p=0.05, alpha=0.025, alternative="less", method = c("asymptotic"))
binom.power(p.alt=0.015, n=196, p=0.05, alpha=0.025, alternative="less", method = c("asymp"))
install.packages("nycflights13")
#Create a vector of names of all necessary packages. All packages are available in CRAN repository.
packages<-c("assertr","stats","tidyr", "stringi", "haven", "rlist", "qdapRegex","stringr",
"plyr", "gtools", "sas7bdat", "outliers", "purrr", "plotly", "ggplot2", "ggrepel", "dplyr", "scales", "RPostgreSQL",
"XML","httr","RMySQL")
#install.packages(packages)
### Load required packages  ###
# Load necessary packages.
lapply(packages, library, character.only = TRUE)
i=1
seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9
seq=seq(0.005,0.03,0.002)
p0=0.05
"less"
power=0.9
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
library(pwr)
library(knitr)
library(binom)
library(binomSamSize)
library(rpact)
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
h1="less"
pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
binom.confint(1,90)
binom.confint(1,90)$upper
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(p=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(p=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- ceiling(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.05,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
binom.confint(0,85,conf.level=0.975,method = c("exact"))
binom.confint(0,90,conf.level=0.975,method = c("exact"))
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=x[i], n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
binom.confint(0,91,conf.level=0.975,method = c("exact"))
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=data$x[i], n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
library("survival")
library("survminer")
data("lung")
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
summary(res.cox)
covariates <- c("age", "sex",  "ph.karno", "ph.ecog", "wt.loss")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = lung)})
## Surv(time, status) ~ age
## Surv(time, status) ~ sex
## Surv(time, status) ~ ph.karno
## Surv(time, status) ~ ph.ecog
## Surv(time, status) ~ wt.loss
## Surv(time, status) ~ sex
# Extract data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);#coeficient beta
HR <-signif(x$coef[2], digits=2);#exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value")
return(res)
# return(exp(cbind(coef(x),confint(x)))) ## For KI
})
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
res.cox <- coxph(Surv(time, status) ~ age + sex + ph.ecog, data =  lung)
summary(res.cox)
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung, color = "#2E9FDF",
ggtheme = theme_minimal())
?ggsurvplot
res.cox
?coxph
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung,
strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
# Survival curves
fit <- survfit(res.cox, newdata = sex_df)
ggsurvplot(fit, data=sex_df, conf.int = TRUE,
legend.labs=c("Sex=1", "Sex=2"),
ggtheme = theme_minimal())
res.cox.strata <- coxph(Surv(time, status) ~ age + strata(sex), data =  lung)
summary(res.cox.strata)
ggsurvplot(survfit(res.cox.strata), data=lung,
color = "#2E9FDF",
ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox.strata), data=lung, strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
res.cox <- coxph(Surv(time, status) ~ age + sex + wt.loss, data =  lung)
test.ph <- cox.zph(res.cox)
test.ph
## In principle, Schoenfeld residuals have nothing to do with time. A chart showing a non-random graph showing time changes over time indicates a violation of the PH assumption
ggcoxzph(test.ph)
ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## type: the type of residuals to present on Y axis. Allowed values include one of
## c(“martingale”, “deviance”, “score”, “schoenfeld”, “dfbeta”, “dfbetas”, “scaledsch”, “partial”).
ggcoxdiagnostics(res.cox, type = "dfbeta",
linear.predictions = FALSE, ggtheme = theme_bw())
ggcoxdiagnostics(res.cox, type = "deviance",
linear.predictions = FALSE, ggtheme = theme_bw())
reticulate::repl_python()
import pandas as pd # for data manipulation
import numpy as np # for data manipulation
from sklearn.linear_model import LinearRegression # to build a LR model for comparison
import plotly.graph_objects as go # for data visualization
import plotly.express as px # for data visualization
import statsmodels.api as sm # to build a LOWESS model
from scipy.interpolate import interp1d # for interpolation of new data points
import sklearn
pip install -U scikit-learn scipy matplotlib
quit
install.packages("SASmarkdown")
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(knitr)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
library(SASmarkdown)
library(knitr)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
library(tidyverse)
library(reticulate)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
# run these commands to convince yourself that
# within this knitr session the engine changed.
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
proc means data=sashelp.class;
aspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
# run these commands to convince yourself that
# within this knitr session the engine changed.
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
saspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
data _null_;
put 'Hello, world!';
run;
### For API access and XML processing and CSM analysis
packages<-c("readr","pwr","multcomp", "dplyr", "tidyr", "SASmarkdown", "ggplot2", "knitr", "papeR")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
data(economics, package="ggplot2")  # load data
economics$index <- 1:nrow(economics)  # create index variable
economics <- economics[1:80, ]  # retail 80rows for better graphical understanding
loessMod10 <- loess(uempmed ~ index, data=economics, span=0.10) # 10% smoothing span
loessMod25 <- loess(uempmed ~ index, data=economics, span=0.25) # 25% smoothing span
loessMod50 <- loess(uempmed ~ index, data=economics, span=0.50) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
smoothed10
economics$date
plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
economics$smoothed10 <- predict(loessMod10)
economics$smoothed25 <- predict(loessMod25)
economics$smoothed50 <- predict(loessMod50)
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes( )) +
geom_smooth()
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes( )) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color=blue)) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color="blue")) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color="blue")) +
geom_point(mapping = aes(x = date, y = smoothed10, color="yellow")) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="blue")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="blue")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="yellow")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="##CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="##CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="##660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, colour="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, colour="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, colour="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#660000") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_point(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
