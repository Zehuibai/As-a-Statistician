HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value")
return(res)
# return(exp(cbind(coef(x),confint(x)))) ## For KI
})
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
res.cox <- coxph(Surv(time, status) ~ age + sex + ph.ecog, data =  lung)
summary(res.cox)
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung, color = "#2E9FDF",
ggtheme = theme_minimal())
?ggsurvplot
res.cox
?coxph
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung,
strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
# Survival curves
fit <- survfit(res.cox, newdata = sex_df)
ggsurvplot(fit, data=sex_df, conf.int = TRUE,
legend.labs=c("Sex=1", "Sex=2"),
ggtheme = theme_minimal())
res.cox.strata <- coxph(Surv(time, status) ~ age + strata(sex), data =  lung)
summary(res.cox.strata)
ggsurvplot(survfit(res.cox.strata), data=lung,
color = "#2E9FDF",
ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox.strata), data=lung, strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
res.cox <- coxph(Surv(time, status) ~ age + sex + wt.loss, data =  lung)
test.ph <- cox.zph(res.cox)
test.ph
## In principle, Schoenfeld residuals have nothing to do with time. A chart showing a non-random graph showing time changes over time indicates a violation of the PH assumption
ggcoxzph(test.ph)
ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## type: the type of residuals to present on Y axis. Allowed values include one of
## c(“martingale”, “deviance”, “score”, “schoenfeld”, “dfbeta”, “dfbetas”, “scaledsch”, “partial”).
ggcoxdiagnostics(res.cox, type = "dfbeta",
linear.predictions = FALSE, ggtheme = theme_bw())
ggcoxdiagnostics(res.cox, type = "deviance",
linear.predictions = FALSE, ggtheme = theme_bw())
reticulate::repl_python()
import pandas as pd # for data manipulation
import numpy as np # for data manipulation
from sklearn.linear_model import LinearRegression # to build a LR model for comparison
import plotly.graph_objects as go # for data visualization
import plotly.express as px # for data visualization
import statsmodels.api as sm # to build a LOWESS model
from scipy.interpolate import interp1d # for interpolation of new data points
import sklearn
pip install -U scikit-learn scipy matplotlib
quit
install.packages("SASmarkdown")
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(SASmarkdown)
library(knitr)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
library(SASmarkdown)
library(knitr)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
library(tidyverse)
library(reticulate)
saspath <- "C:/SASHome/SASFoundation/9.4sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
# run these commands to convince yourself that
# within this knitr session the engine changed.
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
proc means data=sashelp.class;
aspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
# run these commands to convince yourself that
# within this knitr session the engine changed.
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
saspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
engine.opts=sasopts, comment=NA)
knitr::opts_chunk$get()$engine
knitr::opts_chunk$get()$engine.path
knitr::opts_chunk$get()$engine.opts
data _null_;
put 'Hello, world!';
run;
### For API access and XML processing and CSM analysis
packages<-c("readr","pwr","multcomp", "dplyr", "tidyr", "SASmarkdown", "ggplot2", "knitr", "papeR")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
data(economics, package="ggplot2")  # load data
economics$index <- 1:nrow(economics)  # create index variable
economics <- economics[1:80, ]  # retail 80rows for better graphical understanding
loessMod10 <- loess(uempmed ~ index, data=economics, span=0.10) # 10% smoothing span
loessMod25 <- loess(uempmed ~ index, data=economics, span=0.25) # 25% smoothing span
loessMod50 <- loess(uempmed ~ index, data=economics, span=0.50) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
smoothed10
economics$date
plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
economics$smoothed10 <- predict(loessMod10)
economics$smoothed25 <- predict(loessMod25)
economics$smoothed50 <- predict(loessMod50)
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes( )) +
geom_smooth()
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes( )) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color=blue)) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color="blue")) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics, mapping = aes(x = date, y = smoothed10)) +
geom_point(mapping = aes(color="blue")) +
geom_point(mapping = aes(x = date, y = smoothed10, color="yellow")) +
geom_smooth() +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="blue")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="blue")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="yellow")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="##CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="##CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="##660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, colour="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, colour="#CCC00")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, colour="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed10, color="darkred")) +
geom_smooth(mapping = aes(x = date, y = smoothed25, color="#660000")) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#660000") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_point(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
### Sample Path of an AR(1) Process
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
par(mfrow = c(2,1))
plot(arima.sim(list(order=c(0,0,1), ma=.9), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
plot(arima.sim(list(order=c(0,0,1), ma=-.9), n=100), ylab="x",
main=(expression(MA(1)~~~theta==-.5)))
data(melsyd)
data(fpp::melsyd)
install.packages("fpp")
data(fpp::melsyd)
require(fpp)
data(melsyd)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
library(ggplot2)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
data(a10)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
str(a10)
a10
head(a10)
### A useful variation on the seasonal plot uses polar coordinates. Setting polar=TRUE makes the time series axis circular rather than horizontal, as shown below.
ggseasonplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggsubseriesplot(a10) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
ggsubseriesplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
ggsubseriesplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
## To see the relationships between these five time series, we can plot each time series against the others. These plots can be arranged in a scatterplot matrix
GGally::ggpairs(as.data.frame(visnights[,1:5]))
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
data(visnights)
data(visnights)
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
install.packages("fpp2")
library(fpp2)
data(visnights)
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
## To see the relationships between these five time series, we can plot each time series against the others. These plots can be arranged in a scatterplot matrix
GGally::ggpairs(as.data.frame(visnights[,1:5]))
library(fpp)
data(ausbeer)
beer2 <- window(ausbeer, start=1992)
gglagplot(beer2)
ggAcf(beer2)
beer2
ggAcf(beer2)
data(elec)
ggAcf(beer2)
data(elec)
aelec <- window(elec, start=1980)
ggAcf(aelec, lag=48)
set.seed(30)
y <- ts(rnorm(50))
autoplot(y) + ggtitle("White noise")
ggAcf(y)+ ggtitle("Autocorrelation function for the white noise series.")
#Loading the Data Set
data("AirPassengers")
#This tells you that the data series is in a time series format
is.ts(AirPassengers)
#Starting index, end index
start(AirPassengers)
AirPassengers
time(AirPassengers)
#This will print the cycle across years.
frequency(AirPassengers)
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
abline(reg=lm(AirPassengers~time(AirPassengers)))+
xlab("Year") +
ylab("Number of Passengers")
reg=lm(AirPassengers~time(AirPassengers))
reg=lm(AirPassengers~time(AirPassengers))
reg
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
autolayer(reg)+
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
reg=lm(AirPassengers~time(AirPassengers))
reg$coefficients
reg$coefficients[1]
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
reg=lm(AirPassengers~time(AirPassengers))
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1])
autoplot(AirPassengers) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
acf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggAcf(AirPassengers)
## Fit the AR model to AirPassengers
## Note for reference that an AR model is an ARIMA(1, 0, 0) model.
AR <- arima(AirPassengers, order = c(1,0,0))
print(AR)
?autoplot
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
install.packages("ggfortify")
library(zoo)
library(tseries)
library(ggplot2)
library(ggfortify)
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red"))
#Using predict() to make a 1-step forecast
predict_AR <- predict(AR)
#Obtaining the 1-step forecast using $pred[1]
predict_AR$pred[1]
#ALternatively Using predict to make 1-step through 10-step forecasts
predict(AR, n.ahead = 10)
MA <- arima(AirPassengers, order = c(0,0,1))
print(MA)
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue"))
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue")) +
ggtitle("Plotting the series along with the MA fitted values") +
xlab("Year") +
ylab("Number of Passengers")
# Find correlation between AR_fit and MA_fit
cor(AR_fit, MA_fit)
MA_fit <- AirPassengers - resid(MA)
cor(AR_fit, MA_fit)
AIC(MA)
BIC(AR)
