# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid"),
l=40) +                    # Use darker colors, lightness=40
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
expand_limits(y=0) +                        # Expand y range
scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
theme_bw() +
theme(legend.justification=c(1,0),
legend.position=c(1,0))               # Position legend in bottom right
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.1)
ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid"),
l=40) +                    # Use darker colors, lightness=40
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
expand_limits(y=0) +                        # Expand y range
scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
theme_bw() +
theme(legend.justification=c(1,0),
legend.position=c(1,0))               # Position legend in bottom right
tgc2 <- tgc
tgc2$dose <- factor(tgc2$dose)
ggplot(tgc2, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +      # Thinner lines
geom_errorbar(aes(ymin=len-se, ymax=len+se),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_fill_hue(name="Supplement type", # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid")) +
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
scale_y_continuous(breaks=0:20*4) +
theme_bw()
library(sas7bdat)
install.packages("sas7bdat")
path <- "C:/Users/zbai/Projects/00_Project/00 PMS_VENUS/VENUS_CIR/01_Datasets"
library(sas7bdat)
ACD <- read.sas7bdat(file = file.path(path, "ACD.sas7bdat"))
install.packages("mindr")
library('mindr')
### text -> widget
input <- c("# Chapter 1", "## Section 1.1", "## Section 1.2", "# Chapter 2")
mm(from = input, type = "text", root = "mindr")
input <- c("# Chapter 1", "## Section 1.1", "### Section 1.1.1", "## Section 1.2", "# Chapter 2")
mm(from = input, type = "text", root = "mindr")
input <- system.file("31-Group-Sequential-Design.Rmd", package = "mindr")
mm(from = input, type = "file", root = "mindr")
input <- system.file("./31-Group-Sequential-Design.Rmd", package = "mindr")
mm(from = input, type = "file", root = "mindr")
input <- system.file("./31-Group-Sequential-Design.Rmd", package = "mindr")
input
input <- system.file("./17-Non-Parametric-Test.Rmd", package = "mindr")
mm(from = input, type = "file", root = "mindr")
input <- system.file("C:/Users/zbai/Documents/GitHub/As-a-Statistician/17-Non-Parametric-Test.Rmd", package = "mindr")
mm(from = input, type = "file", root = "mindr")
input <- system.file("C:/Users/zbai/Documents/GitHub/As-a-Statistician/17-Non-Parametric-Test.Rmd")
input
?mm
input <- system.file("./new_rmd.Rmd")
input <- system.file("./new_rmd.Rmd", package = "mindr")
mm(from = input, type = "file", root = "mindr")
### Rmd -> widget
input <- system.file("./content.md", package = "mindr")
mm(from = input, type = "file", root = "mindr")
?md2mm
path <- system.file("content/md", package = "mindr")
md2mm(path = path)
path <- system.file("./content/md", package = "mindr")
md2mm(path = path)
system.file("./content/md", package = "mindr")
path <- system.file("example/content/md", package = "mindr")
md2mm(path = path, remove_curly_bracket = TRUE)
path <- system.file("example/content/md", package = "mindr")
md2r(path = path)
library('mindr')
input <- c("# Chapter 1", "## Section 1.1", "### Section 1.1.1", "## Section 1.2", "# Chapter 2")
mm(from = input, type = "text", root = "mindr")
path <- system.file("examples/md", package = "mindr")
md2mm(path = path) md2mm(path = path, remove_curly_bracket = TRUE)
md2mm(path = path, remove_curly_bracket = TRUE)
md2mm(path = path)
mm(path = path)
?mm
mm(from = "example/content.md", type = "file", root = "mindr")
mm(from = "31-Group-Sequential-Design.Rmd", type = "file", root = "mindr")
widget <- mm(from = "31-Group-Sequential-Design.Rmd", type = "file", root = "mindr")
widget
View(widget)
install.packages("scriptName")
library("scriptName")
current_filename()
?current_filename
filename <- current_filename()
print(filename)
filename <- current_source_filename()
print(filename)
knitr::current_input()
?current_input
knitr::current_input(dir = FALSE)
setwd( )
dirname(rstudioapi::getSourceEditorContext()$path)
rstudioapi::getSourceEditorContext()
rstudioapi::getSourceEditorContext()$path
filename <- rstudioapi::getSourceEditorContext()$path
widget <- mm(from = filename, type = "file", root = "mindr")
widget
widget <- mm(from = filename, type = "file")
widget
?mm
widget <- mm(from = filename, type = "file", root = NA)
widget
widget <- mm(from = filename, type = "file", root = "")
widget
library('mindr')
widget <- mm(from = "Statistical-knowledge-mind-map-contents.Rmd", type = "file", root = "")
widget
dir(rstudioapi::getSourceEditorContext()$path)
rstudioapi::getSourceEditorContext()$path
library(lmer)
install.packages("lme4")
library("lmer4")
library("lme4")
load('./01_Datasets/nurses.RData')
nurses_hierarchical = lmer(
stress ~ age + sex + experience + treatment + wardtype + hospsize
+ (1 | hospital) + (1 | hospital:ward),
data = nurses
)
summary(nurses_hierarchical)
plot(nurses_hierarchical)
library('mindr')
## rstudioapi::getSourceEditorContext()$path
widget <- mm(from = "Statistical-knowledge-mind-map-contents.Rmd", type = "file", root = "")
widget
library("multcomp")
data("recovery", package = "multcomp")
recovery.aov <- aov(minutes ~ blanket, data = recovery)
recovery.mc <- glht(recovery.aov,
linfct = mcp(blanket = "Dunnett"),
alternative = "less")
summary(recovery.mc, test = adjusted(type = "free"))
R. Version()
R.Version()
knitr::opts_chunk$set(echo = TRUE)
# load required package
library(pwr)
library(knitr)
library("pwr")
library(binom)
library(binomSamSize)
one_propotion <- function(seq,p0,h1,corr,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.025,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Length[i] <- binom.length(p=seq[i], n=data$wald.ne[i],
conf.level = 0.95, method = c("asymptotic"))$length[1]
data$ac.ne[i] <- ciss.agresticoull(seq[i],data$Length[i]/2, alpha=0.05)
## data$wilson.ne[i] <- ciss.wilson(seq[i],data$Length[i]/2, alpha=0.05)
data$wald.ne.drop[i] <- ceiling(data$n[i]/0.9)
data$ac.ne.drop[i] <- ceiling(data$ac.ne[i]/0.9)
## data$wilson.ne.drop[i] <- ceiling(data$wilson.ne[i]/0.9)
data$wald.ne.cor[i] <- ceiling((1+corr)*data$n[i])
data$ac.ne.cor[i] <- ceiling((1+corr)*data$ac.ne[i])
## data$wilson.ne.cor[i] <- ceiling((1+corr)*data$wilson.ne[i])
data$wald.ns[i] <- ceiling(data$n[i]/2)
data$ac.ns[i] <- ceiling(data$ac.ne[i]/2)
## data$wilson.ns[i] <- ceiling(data$wilson.ne[i]/2)
data$wald.ns.drop[i] <- ceiling(data$n[i]/2/0.9)
data$ac.ns.drop[i] <- ceiling(data$ac.ne[i]/2/0.9)
## data$wilson.ns.drop[i] <- ceiling(data$wilson.ne[i]/2/0.9)
}
data <- data[,-c(3,5)]
return(data)
}
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=0.5, power=0.94)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.94)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.88)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
88*9
88*90
EP2 <- one_propotion(seq=seq(0.005,0.02,0.005),p0=0.05,h1="less",corr=-0.023, power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.90)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
88*92
88*92
EP2 <- one_propotion(seq=seq(0.001,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.90)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
EP2 <- one_propotion(seq=seq(0.002,0.003,0.0001),p0=0.05,h1="less",corr=0.387, power=0.99)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 99% power")
88*92
EP2 <- one_propotion(seq=seq(0.01,0.02,0.001),p0=0.05,h1="less",corr=-0.023, power=0.92)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 94% power")
.94*.9
.94*.99
?binom.confint
binom.confint(x=0.01*255, n= 255, conf.level = 0.95, method = c("asymptotic"))
?binom.power
binom.power(p.alt=0.015, n=196, p=0.05, alpha=0.025, alternative="less", method = c("asymptotic"))
binom.power(p.alt=0.015, n=196, p=0.05, alpha=0.025, alternative="less", method = c("asymp"))
install.packages("nycflights13")
#Create a vector of names of all necessary packages. All packages are available in CRAN repository.
packages<-c("assertr","stats","tidyr", "stringi", "haven", "rlist", "qdapRegex","stringr",
"plyr", "gtools", "sas7bdat", "outliers", "purrr", "plotly", "ggplot2", "ggrepel", "dplyr", "scales", "RPostgreSQL",
"XML","httr","RMySQL")
#install.packages(packages)
### Load required packages  ###
# Load necessary packages.
lapply(packages, library, character.only = TRUE)
i=1
seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9
seq=seq(0.005,0.03,0.002)
p0=0.05
"less"
power=0.9
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
library(pwr)
library(knitr)
library(binom)
library(binomSamSize)
library(rpact)
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
h1="less"
pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
binom.confint(1,90)
binom.confint(1,90)$upper
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(p=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(p=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- ceiling(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
EP2 <- one_propotion(seq=seq(0.005,0.03,0.002),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.05,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.05,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
binom.confint(0,85,conf.level=0.975,method = c("exact"))
binom.confint(0,90,conf.level=0.975,method = c("exact"))
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=x[i], n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
binom.confint(0,91,conf.level=0.975,method = c("exact"))
one_propotion <- function(seq,p0,alpha,h1,power){
data <- data.frame(p1=seq,p0=rep(p0,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=alpha,alternative=h1)$n
data$x[i] <- round(seq[i]*data$n[i])
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.UL[i] <- binom.confint(x=data$x[i], n=data$wald.ne[i],
conf.level = 1-alpha, method = c("exact"))$upper[1]
}
### data <- data[,-c(3,5)]
return(data)
}
### Agresti-Coull method
EP2 <- one_propotion(seq=seq(0.001,0.015,0.001),alpha=0.025,p0=0.05,h1="less",power=0.9)
kable(EP2,
caption = "Sample size calculation for endpoint CDVA 2 lines 90% power")
library("survival")
library("survminer")
data("lung")
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
summary(res.cox)
covariates <- c("age", "sex",  "ph.karno", "ph.ecog", "wt.loss")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = lung)})
## Surv(time, status) ~ age
## Surv(time, status) ~ sex
## Surv(time, status) ~ ph.karno
## Surv(time, status) ~ ph.ecog
## Surv(time, status) ~ wt.loss
## Surv(time, status) ~ sex
# Extract data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);#coeficient beta
HR <-signif(x$coef[2], digits=2);#exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value")
return(res)
# return(exp(cbind(coef(x),confint(x)))) ## For KI
})
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
res.cox <- coxph(Surv(time, status) ~ age + sex + ph.ecog, data =  lung)
summary(res.cox)
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung, color = "#2E9FDF",
ggtheme = theme_minimal())
?ggsurvplot
res.cox
?coxph
## Visualizing the estimated distribution of survival times
## Plot the baseline survival function
ggsurvplot(survfit(res.cox), data=lung,
strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
# Survival curves
fit <- survfit(res.cox, newdata = sex_df)
ggsurvplot(fit, data=sex_df, conf.int = TRUE,
legend.labs=c("Sex=1", "Sex=2"),
ggtheme = theme_minimal())
res.cox.strata <- coxph(Surv(time, status) ~ age + strata(sex), data =  lung)
summary(res.cox.strata)
ggsurvplot(survfit(res.cox.strata), data=lung,
color = "#2E9FDF",
ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox.strata), data=lung, strata=sex,
color = "#2E9FDF",
ggtheme = theme_minimal())
res.cox <- coxph(Surv(time, status) ~ age + sex + wt.loss, data =  lung)
test.ph <- cox.zph(res.cox)
test.ph
## In principle, Schoenfeld residuals have nothing to do with time. A chart showing a non-random graph showing time changes over time indicates a violation of the PH assumption
ggcoxzph(test.ph)
ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## ggcoxdiagnostics(fit, type = , linear.predictions = TRUE)
## type: the type of residuals to present on Y axis. Allowed values include one of
## c(“martingale”, “deviance”, “score”, “schoenfeld”, “dfbeta”, “dfbetas”, “scaledsch”, “partial”).
ggcoxdiagnostics(res.cox, type = "dfbeta",
linear.predictions = FALSE, ggtheme = theme_bw())
ggcoxdiagnostics(res.cox, type = "deviance",
linear.predictions = FALSE, ggtheme = theme_bw())
