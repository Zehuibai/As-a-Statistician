[["ggplot2.html", "Chapter 4 ggplot2 4.1 Parametric Rendering 4.2 Scatter plot 4.3 Histogram 4.4 Bar plot 4.5 Box plot 4.6 Other rendering 4.7 DiagrammeR 4.8 ggstatsplot", " Chapter 4 ggplot2 4.1 Parametric Rendering 4.1.1 Grammar ggplot2 implements the idea of a grammar of graphics. The grammar implemented by ggplot2 could be summarized as follows: plot ::= coord scale+ facet? layer+ layer ::= data mapping stat geom position? A plot is defined by a coordinate system (coord), one or more scales (scale), an optional faceting specification (facet), and one or more layers (layer). A layer is defined as an R data frame (data), a specification mapping columns of that frame into aesthetic properties (mapping), a statistical approach to summarize the rows of that frame (stat), a geometric object to visually represent that summary (geom), and an optional position adjustment to move overlapping geometric objects out of their way (position). 4.1.2 Coordinate system coord * coord_cartesian - (default) cartesian coordinate system (x horizontal from left to right, y vertical from bottom to top) * coord_flip - flipped cartesian coordinate system (x vertical from bottom to top, y horizontal from left to right) * coord_trans * coord_equal * coord_polar - polar coordinate system; the x (or y) scale is mapped to the angle (theta) * coord_map - various map projections facet facet_wrap(~cell) - univariate: create a 1-d strip of panels, based on one factor, and wrap the strip into a 2-d matrix facet_grid(row~col) - (usually) bivariate: create a 2-d matrix of panels, based on two factors Modify the display range of the axis scale_x_continuous(break, lables, ) scale_y_continuous  Modify the label of the axis (content, size, font, color, bold, position, angle) labs(subtitle=.. title=.. y=.. x=..) ggtitle(title=.. subtitle=..) + xlab(..) + ylab(..) Change label of x axis xlab(..) + theme(axis.title.x = element_text(size=12, color=green, face=bold,vjust=0.5,hjust=0.5,angle=45)) Remove the axis tick marks theme(panel.grid = element_blank()) theme(axis.text = element_blank()) theme(axis.ticks = element_blank()) theme(axis.ticks.y = element_blank()) 4.1.3 Legend Change the legend title p + labs(fill = Type) order p + guides(fill = guide_legend(title = Type)) Change the legend position left,top, right, bottom, none p + theme(legend.position=top) order given numerical position coordinates p + theme(legend.position = c(0.7, 0.1), legend.direction = horizontal) Reverse legend order p + guides(fill = guide_legend(reverse=TRUE)) p + scale_fill_discrete(guide = guide_legend(reverse=TRUE)) p + scale_fill_discrete(breaks = rev(levels(iris$Species))) Change labels and order Change the x order p + scale_x_discrete(limits=c(versicolor, virginica, setosa)) Change legend label name p + scale_fill_discrete(name = Species, labels = c(S, V1, V2)) Change legend color p + scale_fill_manual(values = c(#d8b365, #f5f5f5, #5ab4ac)) Remove legend p + theme(legend.position = none) p + guides(fill=FALSE) Modify multiple legends: remove two data(mtcars) mtcars\\(cyl&lt;-as.factor(mtcars\\)cyl) mtcars\\(gear &lt;- as.factor(mtcars\\)gear) p &lt;- ggplot(data = mtcars, aes(x = mpg, y = wt))+ geom_point(aes(color = cyl, size = qsec, shape = gear)) + theme_bw() p + guides(shape = FALSE, size = FALSE) Change legend font (color, size) p + theme(legend.title = element_text(color = blue, size = 15), legend.text = element_text(color = orange, size = 12)) Change legend background p + theme( # Change legend background color legend.background = element_rect(fill = gray), legend.key = element_rect(fill = yellow, color = NA), # Change legend key size and key width legend.key.size = unit(1.5, cm), legend.key.width = unit(1,cm) ) Add legend outer border p + theme( legend.background = element_rect(color = blue, linetype = solid, size = 1) ) 4.1.4 geom geom Useful stats (default in bold) Default position adjustment Parameters (when used with given stat) blank identity identity no parameters abline abline identity slope, intercept, size, linetype, colour, alpha identity identity slope, intercept, size, linetype, colour, alpha hline hline identity yintercept, size, linetype, colour, alpha identity identity y, yend, size, linetype, colour, alpha vline vline identity xintercept, size, linetype, colour, alpha identity identity x, xend, size, linetype, colour, alpha text identity identity x, y, label, size, colour, alpha, hjust, vjust, parse point identity identity x, y, size, shape, colour, fill, alpha, na.rm jitter identity jitter x, y, size, shape, colour, fill, alpha, na.rm segment identity identity x, xend, y, yend, size, linetype, colour, alpha, arrow line identity identity group, x, y, size, linetype, colour, alpha, arrow bar identity stack x, y, size, linetype, colour, fill, alpha, weight(?) ??? bin stack x, y, size, linetype, colour, fill, alpha, weight(?) ??? histogram alias for geom_bar area identity stack group, x, y, size, linetype, colour, fill, alpha, na.rm ribbon identity identity group, x, ymin, ymax, size, linetype, colour, fill, alpha, na.rm linerange identity identity x, ymin, ymax, size, linetype, colour, alpha pointrange identity identity x, y, ymin, ymax, size, shape, linetype, colour, fill, alpha errorbar identity identity x, ymin, ymax, size, linetype, colour, alpha, width errorbarh identity identity x, xmin, xmax, y, size, linetype, colour, alpha, height crossbar identity identity x, y, ymin, ymax, size, linetype, colour, fill, alpha, width, fatten boxplot identity dodge x, ymin, lower, middle, upper, ymax, size, colour, fill, alpha, weight(?), width(?), outliers(?), outlier.size, outlier.shape, outlier.colour ??? boxplot dodge x, ymin, lower, middle, upper, ymax, size, colour, fill, alpha, weight(?), width(?), outliers(?), outlier.size, outlier.shape, outlier.colour ??? path identity identity group, x, y, size, linetype, colour, alpha, na.rm, arrow, linemitre, linejoin, lineend polygon identity identity group, x, y, size, linetype, colour, fill, alpha rect identity identity xmin, xmax, ymin, ymax, size, linetype, colour, fill, alpha rug identity identity x, y, size, linetype, colour, alpha step identity identity group, x, y, size, linetype, colour, alpha, direction bin2d identity identity xmin, xmax, ymin, ymax, size, linetype, colour, fill, alpha, weight(?) ??? bin2d identity xmin, xmax, ymin, ymax, size, linetype, colour, fill, alpha, weight(?) ??? tile identity identity x, y, size, linetype, colour, fill, alpha hex identity identity x, y, size, colour, fill, alpha binhex identity x, y, size, colour, fill, alpha density identity identity group, x, y, size, linetype, colour, fill, alpha, weight(?) ??? density identity group, x, y, size, linetype, colour, fill, alpha, weight(?) ??? density2d identity identity group, x, y, size, linetype, colour, alpha, weight(?), na.rm, arrow, linemitre, linejoin, lineend ??? density2d identity group, x, y, size, linetype, colour, alpha, weight(?), na.rm, arrow, linemitre, linejoin, lineend ??? contour identity identity group, x, y, size, linetype, colour, alpha, weight(?), na.rm, arrow, linemitre, linejoin, lineend ??? contour identity group, x, y, size, linetype, colour, alpha, weight(?), na.rm, arrow, linemitre, linejoin, lineend ??? freqpoly identity identity group, x, y, size, linetype, colour, alpha, weight(?) ??? bin identity group, x, y, size, linetype, colour, alpha, weight(?) ??? quantile identity identity group, x, y, size, linetype, colour, alpha, na.rm, arrow, linemitre, linejoin, lineend quantile identity group, x, y, size, linetype, colour, alpha, weight, quantiles, formula, xseq, method, na.rm, arrow, linemitre, linejoin, lineend smooth identity identity group, x, y, ymin, ymax, size, linetype, colour, fill, alpha smooth identity group, x, y, size, linetype, colour, fill, alpha, weight 4.1.5 position position_identity - default of most geoms position_jitter - default of geom_jitter position_dodge - default of geom_boxplot position_stack - default of geom_bar==geom_histogram and geom_area position_fill - useful for geom_bar==geom_histogram and geom_area 4.1.6 scale size - size of a geom shape - shape of a geom linetype - type of a geoms outline (e.g., dashed, dotted) colour - color of a geoms outline fill - color of a geoms fill alpha - transparency of a geom (0=transparent  1=opaque) Functions that ggplot2 provides to define each of the above kinds of scales. x (or y) position scale_x_continuous scale_x_date scale_x_datetime scale_x_discrete size scale_size_continuous scale_area scale_size_discrete scale_size_identity scale_size_manual shape scale_shape_discrete scale_shape_identity scale_shape_manual linetype scale_linetype_discrete scale_linetype_identity scale_linetype_manual colour (or fill) scale_colour_gradient scale_colour_gradient2 scale_colour_gradientn scale_colour_hue scale_colour_brewer scale_colour_grey scale_colour_identity scale_colour_manual alpha scale_alpha_continuous 4.1.7 stat stat_abline - used by geom_abline stat_bin - used by geom_bar == geom_histogram, and geom_freqpoly stat_bin2d - used by geom_bin2d stat_binhex - used by geom_hex stat_boxplot - used by geom_boxplot stat_contour - used by geom_contour stat_density - used by geom_density stat_density2d - used by geom_density2d stat_ecdf stat_function stat_hline - used by geom_hline stat_identity - used by a large number of geoms stat_qq stat_quantile - used by geom_quantile stat_smooth - used by geom_smooth stat_spoke stat_sum stat_summary stat_unique stat_vline - used by geom_vline 4.1.8 Color ColorBrewer scales Hexadecimal color code chart (#fig:Hexadecimal color code chart)Figure: Hexadecimal color code chart 4.1.9 Thema theme_grey() - the default theme, with a grey background theme_bw() - a theme with a white background ggplot2 includes eight themes by default, as shown in Figure. Many more are included in add-on packages like ggthemes, by Jeffrey Arnold. Figure 4.1: Figure: ggplot2 Thema 4.1.10 Saving plots # Save the plot ggsave(p, filename = &quot;chartFromRPractical.png&quot;) 4.2 Scatter plot 4.2.1 Grouping Aesthetic Color Aesthetic Size Aesthetic Alpha Aesthetic Shape Aesthetic library(ggplot2) ## Color Aesthetic ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) ## Set the aesthetic properties of your geom manually ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) ## Size Aesthetic ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class)) ## Alpha aesthetic, which controls the transparency of the points ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class)) ## shape aesthetic ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class)) data(iris) theme_set(theme_bw()) ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width, shape = Species)) + geom_point(aes(color = Species), size = 3) + scale_colour_manual(values=c(&quot;#3399CC&quot;,&quot;#33FF33&quot;,&quot;#FFCC33&quot;))+ scale_shape_manual(values = c(1,2,3)) + xlab(&quot;Petal Length&quot;) + ylab(&quot;Petal Width&quot;) + ylim(0, 3)+ ggtitle(&quot;Petal Width and Length&quot;) + theme(plot.title = element_text(hjust = 0.5,face = &quot;bold&quot;), legend.title = element_blank(), legend.position = c(0.1, 0.85)) 4.2.2 facet facet_wrap(), winding facet, only one standard can be applied to data classification, and the small shapes obtained from different sets of data are arranged in the order of winding from left to right and from top to bottom facet_grid(), facet the drawing of the combination of two variables ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(.~ class, nrow = 2) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(.~ class) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl) Replacing facet strips with text boxes using ggtext:: library(&quot;cowplot&quot;) ggplot(mpg, aes(cty, hwy)) + geom_point() + facet_wrap(~class) + theme_half_open(12) + background_grid() library(&quot;ggtext&quot;) ggplot(mpg, aes(cty, hwy)) + geom_point() + facet_wrap(~class) + theme_half_open(12) + background_grid() + theme( strip.background = element_blank(), strip.text = element_textbox( size = 12, color = &quot;white&quot;, fill = &quot;#5D729D&quot;, box.color = &quot;#4A618C&quot;, halign = 0.5, linetype = 1, r = unit(5, &quot;pt&quot;), width = unit(1, &quot;npc&quot;), padding = margin(2, 0, 1, 0), margin = margin(3, 3, 3, 3) ) ) 4.2.3 geom_smooth ## display different aesthetics in different layers ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth() ## no aesthetic just grouping ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) ## linetype aesthetic set the shape of a point ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv)) ## color aesthetic ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE ) ## Linear line ggplot(mpg, aes(cty, hwy))+ geom_point() + geom_smooth(method=&quot;lm&quot;, se=F) + theme_bw()+ labs(subtitle=&quot;mpg: city vs highway mileage&quot;, y=&quot;hwy&quot;, x=&quot;cty&quot;, title=&quot;Scatterplot with overlapping points&quot;, caption=&quot;Source: midwest&quot;) ## The raw dataset has 234 observations, but shown in figure fewer, because some points lay together, the jitter plot could be used in this case by applying jitter_geom ggplot(mpg, aes(cty, hwy))+ geom_point() + theme_bw()+ geom_jitter(width = .5, size=1) + labs(subtitle=&quot;mpg: city vs highway mileage&quot;, y=&quot;hwy&quot;, x=&quot;cty&quot;, title=&quot;Jittered Points&quot;) 4.2.4 Dot Plot Order fct_reorder: Modifying factor order library(forcats) library(dplyr) relig_summary &lt;- gss_cat %&gt;% group_by(relig) %&gt;% summarise( age = mean(age, na.rm = TRUE), tvhours = mean(tvhours, na.rm = TRUE), n = n() ) ggplot(relig_summary, aes(tvhours, relig)) + geom_point() ggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) + geom_point() Diverging Dot Plot # Data Prep data(&quot;mtcars&quot;) # load data mtcars$`car name` &lt;- rownames(mtcars) # create new column for car names mtcars$mpg_z &lt;- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2) # compute normalized mpg mtcars$mpg_type &lt;- ifelse(mtcars$mpg_z &lt; 0, &quot;below&quot;, &quot;above&quot;) # above / below avg flag mtcars &lt;- mtcars[order(mtcars$mpg_z), ] # sort mtcars$`car name` &lt;- factor(mtcars$`car name`, levels = mtcars$`car name`) # convert to factor to retain sorted order in plot. ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + geom_point(stat=&#39;identity&#39;, aes(col=mpg_type), size=6) + scale_color_manual(name=&quot;Mileage&quot;, labels = c(&quot;Above Average&quot;, &quot;Below Average&quot;), values = c(&quot;above&quot;=&quot;#00ba38&quot;, &quot;below&quot;=&quot;#f8766d&quot;)) + geom_text(color=&quot;white&quot;, size=2) + labs(title=&quot;Diverging Dot Plot&quot;, subtitle=&quot;Normalized mileage from &#39;mtcars&#39;: Dotplot&quot;) + ylim(-2.5, 2.5) + coord_flip() ### Diverging Lollipop Chart ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + geom_point(stat=&#39;identity&#39;, fill=&quot;black&quot;, size=6) + geom_segment(aes(y = 0, x = `car name`, yend = mpg_z, xend = `car name`), color = &quot;black&quot;) + geom_text(color=&quot;white&quot;, size=2) + labs(title=&quot;Diverging Lollipop Chart&quot;, subtitle=&quot;Normalized mileage from &#39;mtcars&#39;: Lollipop&quot;) + ylim(-2.5, 2.5) + coord_flip() # Diverging Barcharts ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + geom_bar(stat=&#39;identity&#39;, aes(fill=mpg_type), width=.5) + scale_fill_manual(name=&quot;Mileage&quot;, labels = c(&quot;Above Average&quot;, &quot;Below Average&quot;), values = c(&quot;above&quot;=&quot;#00ba38&quot;, &quot;below&quot;=&quot;#f8766d&quot;)) + labs(subtitle=&quot;Normalised mileage from &#39;mtcars&#39;&quot;, title= &quot;Diverging Bars&quot;) + coord_flip() + theme_bw() 4.2.5 Label and Title + ggtitle(\"Area Vs Population\", subtitle=\"From midwest dataset\") + xlab(\"Area\") + ylab(\"Population\") ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) + labs(title=&quot;Area Vs Population&quot;, subtitle=&quot;From midwest dataset&quot;, y=&quot;Population&quot;, x=&quot;Area&quot;, caption=&quot;Midwest Demographics&quot;) ## Or ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) + ggtitle(&quot;Area Vs Population&quot;, subtitle=&quot;From midwest dataset&quot;) + xlab(&quot;Area&quot;) + ylab(&quot;Population&quot;) Change the Title rendering using ggtext::element_textbox() ggplot(mtcars, aes(disp, mpg)) + geom_point() + labs( title = &quot;&lt;b&gt;Fuel economy vs. engine displacement&lt;/b&gt;&lt;br&gt; &lt;span style = &#39;font-size:10pt&#39;&gt;Lorem ipsum *dolor sit amet,* consectetur adipiscing elit, **sed do eiusmod tempor incididunt** ut labore et dolore magna aliqua. &lt;span style = &#39;color:red;&#39;&gt;Ut enim ad minim veniam,&lt;/span&gt; quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/span&gt;&quot;, x = &quot;displacement (in&lt;sup&gt;3&lt;/sup&gt;)&quot;, y = &quot;Miles per gallon (mpg)&lt;br&gt;&lt;span style = &#39;font-size:8pt&#39;&gt;A measure of the car&#39;s fuel efficiency.&lt;/span&gt;&quot; ) + theme( plot.title.position = &quot;plot&quot;, plot.title = element_textbox_simple( size = 13, lineheight = 1, padding = margin(5.5, 5.5, 5.5, 5.5), margin = margin(0, 0, 5.5, 0), fill = &quot;cornsilk&quot; ), axis.title.x = element_textbox_simple( width = NULL, padding = margin(4, 4, 4, 4), margin = margin(4, 0, 0, 0), linetype = 1, r = grid::unit(8, &quot;pt&quot;), fill = &quot;azure1&quot; ), axis.title.y = element_textbox_simple( hjust = 0, orientation = &quot;left-rotated&quot;, minwidth = unit(1, &quot;in&quot;), maxwidth = unit(2, &quot;in&quot;), padding = margin(4, 4, 2, 4), margin = margin(0, 0, 2, 0), fill = &quot;lightsteelblue1&quot; ) ) 4.2.6 Residuals modf2 &lt;- fortify(lm(formular, data = rf10_comp)) ggplot(modf2, aes(x = modf$bmi, y = .resid)) + geom_point()+ geom_hline(aes(yintercept=0), colour=&quot;#990000&quot;) + labs(title=&quot;Residuals plot for BMI using MICE RF with 10 trees&quot;, x = &quot;BMI&quot;, y = &quot;Residuals&quot;)+ theme_classic() ## Standardized Residuals modf &lt;- fortify(lm(formular, data = data)) ggplot(modf, aes(x = modf$bmi, y = .stdresid)) + geom_point()+ geom_hline(aes(yintercept=0), colour=&quot;#990000&quot;) + labs(title=&quot;Standardised residuals plot for BMI using Full data&quot;, x = &quot;BMI&quot;, y = &quot;Residuals&quot;)+ theme_classic() 4.2.7 Encircling In geom_encircle(), set the data to a new data frame containing only points (rows) or points of interest. In addition, you can expand the curve so that it passes outside the point. The color and size (thickness) of the curve can also be modified. # install &#39;ggalt&#39; pkg # devtools::install_github(&quot;hrbrmstr/ggalt&quot;) options(scipen = 999) library(ggalt) midwest_select &lt;- midwest[midwest$poptotal &gt; 350000 &amp; midwest$poptotal &lt;= 500000 &amp; midwest$area &gt; 0.01 &amp; midwest$area &lt; 0.1, ] # Plot ggplot(midwest, aes(x=area, y=poptotal)) + geom_point(aes(col=state, size=popdensity)) + # draw points geom_smooth(method=&quot;loess&quot;, se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + # draw smoothing line geom_encircle(aes(x=area, y=poptotal), data=midwest_select, color=&quot;red&quot;, size=2, expand=0.08) + # encircle labs(subtitle=&quot;Area Vs Population&quot;, y=&quot;Population&quot;, x=&quot;Area&quot;, title=&quot;Scatterplot + Encircle&quot;, caption=&quot;Source: midwest&quot;) 4.2.8 Dumbbell Plot Dumbbell plot is used to visualize the relative position of two time points (increase or decrease), it could also be used to compare the distance between 2 categories. In order to get right orders of dumbbell, the variable \\(Y\\) should be treated as factor with conresponding orders shown in figure. library(ggalt) health &lt;- read.csv(&quot;https://raw.githubusercontent.com/selva86/datasets/master/health.csv&quot;) health$Area &lt;- factor(health$Area, levels=as.character(health$Area)) # for right ordering of the dumbells # health$Area &lt;- factor(health$Area) ggplot(health, aes(x=pct_2013, xend=pct_2014, y=Area, group=Area)) + geom_dumbbell(color=&quot;#a3c4dc&quot;, size=0.75, point.colour.l=&quot;#0e668b&quot;) + labs(x=NULL, y=NULL, title=&quot;Dumbbell Chart&quot;, subtitle=&quot;Pct Change: 2013 vs 2014&quot;, caption=&quot;Source: https://github.com/hrbrmstr/ggalt&quot;) + theme_classic()+ theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#f7f7f7&quot;), panel.background=element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks=element_blank(), legend.position=&quot;top&quot;, panel.border=element_blank()) 4.3 Histogram 4.3.1 General appearance library(&quot;tidyverse&quot;) smaller &lt;- diamonds %&gt;% filter(carat &lt; 3) ggplot(data = smaller, mapping = aes(x = carat, fill=color))+ geom_histogram(binwidth = 0.1, col=&quot;black&quot;, size=.1) + labs(title=&quot;Histogram with Auto Binning&quot;, subtitle=&quot;Engine Displacement across Vehicle Classes&quot;) ## geom_histogram(bins=5, col=&quot;black&quot;, size=.1) ## Change the color according the number of legend ## scale_color_manual(values = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;)) ## scale_fill_manual(values = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;)) 4.3.2 Themes ggplot2 offers a set of pre-built themes. Try the followings to see which one you like the most: theme_bw() theme_dark() theme_minimal() theme_classic() The hrbrthemes package provides my favourite style. # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv&quot;, header=TRUE) # Make the histogram library(hrbrthemes) data %&gt;% filter( price&lt;300 ) %&gt;% ggplot( aes(x=price)) + stat_bin(breaks=seq(0,300,10), fill=&quot;#69b3a2&quot;, color=&quot;#e9ecef&quot;, alpha=0.9) + ggtitle(&quot;Night price distribution of Airbnb appartements&quot;) + theme_ipsum() 4.3.3 geom_freqpoly() library(&quot;tidyverse&quot;) smaller &lt;- diamonds %&gt;% filter(carat &lt; 3) ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) + geom_freqpoly(binwidth = 0.1) ## display density instead of count ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) + geom_freqpoly(mapping = aes(colour = cut), binwidth = 500) ## geom_density ggplot(mpg, aes(cty)) + geom_density(aes(fill=factor(cyl)), alpha=0.5) + labs(title=&quot;Density plot&quot;, subtitle=&quot;City Mileage Grouped by Number of cylinders&quot;, caption=&quot;Source: mpg&quot;, x=&quot;City Mileage&quot;, fill=&quot;# Cylinders&quot;) 4.3.4 Marginal Histogram / Boxplot This can be achieved using the ggMarginal() function in the ggExtra package. In addition to histograms, you can choose to draw marginal box plots or density plots by setting the corresponding type options. library(&quot;ggExtra&quot;) mpg_select &lt;- mpg[mpg$hwy &gt;= 35 &amp; mpg$cty &gt; 27, ] g &lt;- ggplot(mpg, aes(cty, hwy)) + geom_count() + geom_smooth(method=&quot;lm&quot;, se=F) + theme_bw() ggMarginal(g, type = &quot;histogram&quot;, fill=&quot;transparent&quot;) ggMarginal(g, type = &quot;boxplot&quot;, fill=&quot;transparent&quot;) ggMarginal(g, type = &quot;density&quot;, fill=&quot;transparent&quot;) 4.3.5 Scales Scales control the details of how data values are translated to visual properties. Many different scales are offered by ggplot2. The most widely one is probably the log scale. # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv&quot;, header=TRUE) # Make the histogram data %&gt;% ggplot( aes(x=price)) + geom_histogram(color=&quot;white&quot;, fill=&quot;steelblue4&quot;) + ggtitle(&quot;Night price distribution of Airbnb appartements&quot;) + xlab(&quot;Night price&quot;) + ylab(&quot;Number of apartments&quot;) data %&gt;% ggplot( aes(x=price)) + geom_histogram(color=&quot;white&quot;, fill=&quot;steelblue4&quot;) + ggtitle(&quot;Night price distribution of Airbnb appartements&quot;) + xlab(&quot;Night price&quot;) + ylab(&quot;Number of apartments&quot;) + scale_x_log10() 4.4 Bar plot 4.4.1 Aesthetic ## Color Aesthetic ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut )) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color )) ## Position aesthetic ## position adjustment options: &quot;identity&quot;, &quot;dodge&quot; or &quot;fill&quot;. ## position =fill is like overlay, but each bar has same height. ## position =dodge put objects together ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = &quot;identity&quot;) ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) + geom_bar(fill = NA, position = &quot;identity&quot;)+ facet_wrap(~color) + theme(legend.position = &quot;top&quot;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;, width = 0.5) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + labs(title=&quot;Histogram on Categorical Variable&quot;, subtitle=&quot;Manufacturer across Vehicle Classes&quot;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;dodge&quot;) Change outline colors It is also possible to change manually barplot line colors using the functions : scale_color_manual() : to use custom color palettes p+scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\")) scale_color_brewer() : to use color palettes from RColorBrewer package p+scale_color_brewer(palette=\"Dark2\") scale_color_grey() : to use grey color palettes p + scale_color_grey() + theme_classic() Change fill colors scale_fill_manual() : to use custom colors p+scale_fill_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\")) scale_fill_brewer() : to use color palettes from RColorBrewer package p+scale_fill_brewer(palette=\"Dark2\") scale_fill_grey() : to use grey color palettes p + scale_fill_grey() Change the legend position Change bar fill colors to blues p &lt;- p+scale_fill_brewer(palette=\"Blues\") Change the legend position p + theme(legend.position=\"top\") p + theme(legend.position=\"bottom\") Remove legend p + theme(legend.position=\"none\") Change the order of items in the legend p + scale_x_discrete(limits=c(\"D2\", \"D0.5\", \"D1\")) 4.4.2 Proportion ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color )) ## proportion, rather than count: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))+ scale_y_continuous(labels = scales::percent) + labs(title=&quot;Name&quot;)+ theme_classic() ### coord ## coord_polar() uses polar coordinates bar &lt;- ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) bar + coord_flip() bar + coord_polar() 4.4.3 stat=identity Rotation_5 &lt;- readRDS(file = &quot;./01_Datasets/Rotation_5.rds&quot;) ggplot(data = Rotation_5, aes(x = Visit, y= Percentage, fill=Treatment)) + geom_bar(stat=&quot;identity&quot;, width =0.5, position=position_dodge()) + geom_text(aes(label=N), vjust=1.6, color=&quot;white&quot;, position = position_dodge(0.5), size=3.5)+ geom_text(aes(label=P, x=Visit, y=0.97),hjust=0.4, size=3.5)+ scale_fill_brewer(palette=&quot;Paired&quot;)+ scale_y_continuous(labels = scales::percent, breaks=seq(0, 1, 0.1)) + theme_bw() + theme(legend.position = &quot;none&quot;) + labs(x = &quot;&quot;, y = &quot;Responder rate&quot;, title = &quot;Rotational stability within 5° from Visit H0 (sitting)&quot;) 4.4.4 Ranking ### Ordered Bar Chart cty_mpg &lt;- aggregate(mpg$cty, by=list(mpg$manufacturer), FUN=mean) # aggregate colnames(cty_mpg) &lt;- c(&quot;make&quot;, &quot;mileage&quot;) # change column names cty_mpg &lt;- cty_mpg[order(cty_mpg$mileage), ] # sort cty_mpg$make &lt;- factor(cty_mpg$make, levels = cty_mpg$make) # to retain the order in plot. # Draw plot ggplot(cty_mpg, aes(x=make, y=mileage)) + geom_bar(stat=&quot;identity&quot;, width=.5, fill=&quot;tomato3&quot;) + labs(title=&quot;Ordered Bar Chart&quot;, subtitle=&quot;Make Vs Avg. Mileage&quot;, caption=&quot;source: mpg&quot;) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + theme_bw() ### Lollipop Chart ### Lollipop charts conveys the same information as in bar charts. By reducing the thick bars into thin lines, it reduces the clutter and lays more emphasis on the value. It looks nice and modern. ggplot(cty_mpg, aes(x=make, y=mileage)) + geom_point(size=3) + geom_segment(aes(x=make, xend=make, y=0, yend=mileage)) + labs(title=&quot;Lollipop Chart&quot;, subtitle=&quot;Make Vs Avg. Mileage&quot;, caption=&quot;source: mpg&quot;) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) 4.4.5 Means and error bars PrimEnd &lt;- data.frame(&#39;Primary Endpoint&#39;=c(&quot;Primary Analysis&quot;, &quot;Sensitivity Analysis 1&quot;, &quot;Sensitivity Analysis 2&quot;, &quot;Primary Analysis after imputation&quot;), mean=c(-0.2945, -0.08334, -0.2926, -0.2395), LL=c(-0.9612, -0.2861, -0.9344, -0.7521), UL=c(0.3722, 0.1194, 0.3491, 0.2730), pvalue=c(&quot;P = 0.313&quot;, &quot;P = 0.347&quot;, &quot;P = 0.304&quot;,&quot;P = 0.359&quot;)) level &lt;- PrimEnd$Primary.Endpoint PrimEnd$Primary.Endpoint &lt;- factor(PrimEnd$Primary.Endpoint, levels=level) library(ggplot2) ggplot(PrimEnd, aes(x=Primary.Endpoint, y=mean)) + geom_line() + geom_point()+ geom_text(aes(label=pvalue),hjust=-0.2, vjust=0) + geom_hline(aes(yintercept=0, color=&quot;black&quot;, linetype=&quot;dot&quot;)) + geom_errorbar(aes(ymin=LL, ymax=UL), width = 0.5, size = 0.5)+ theme_bw() + theme(legend.position = &quot;none&quot;) + labs(x = &quot;&quot;, y = &quot;Difference between the IOLs&quot;, title = &quot;Superiority analysis in mean absolute rotation between Visit H0 (sitting) and H1&quot;) tg &lt;- ToothGrowth ## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%). ## data: a data frame. ## measurevar: the name of a column that contains the variable to be summariezed ## groupvars: a vector containing names of columns that contain grouping variables ## na.rm: a boolean that indicates whether to ignore NA&#39;s ## conf.interval: the percent range of the confidence interval (default is 95%) summarySE &lt;- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) { library(plyr) # New version of length which can handle NA&#39;s: if na.rm==T, don&#39;t count them length2 &lt;- function (x, na.rm=FALSE) { if (na.rm) sum(!is.na(x)) else length(x) } # This does the summary. For each group&#39;s data frame, return a vector with # N, mean, and sd datac &lt;- ddply(data, groupvars, .drop=.drop, .fun = function(xx, col) { c(N = length2(xx[[col]], na.rm=na.rm), mean = mean (xx[[col]], na.rm=na.rm), sd = sd (xx[[col]], na.rm=na.rm) ) }, measurevar ) # Rename the &quot;mean&quot; column datac &lt;- rename(datac, c(&quot;mean&quot; = measurevar)) datac$se &lt;- datac$sd / sqrt(datac$N) # Calculate standard error of the mean # Confidence interval multiplier for standard error # Calculate t-statistic for confidence interval: # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1 ciMult &lt;- qt(conf.interval/2 + .5, datac$N-1) datac$ci &lt;- datac$se * ciMult return(datac) } tgc &lt;- summarySE(tg, measurevar=&quot;len&quot;, groupvars=c(&quot;supp&quot;,&quot;dose&quot;)) # The errorbars overlapped, so use position_dodge to move them horizontally pd &lt;- position_dodge(0.1) ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) + geom_errorbar(aes(ymin=len-se, ymax=len+se), colour=&quot;black&quot;, width=.1, position=pd) + geom_line(position=pd) + geom_point(position=pd, size=3, shape=21, fill=&quot;white&quot;) + # 21 is filled circle xlab(&quot;Dose (mg)&quot;) + ylab(&quot;Tooth length&quot;) + scale_colour_hue(name=&quot;Supplement type&quot;, # Legend label, use darker colors breaks=c(&quot;OJ&quot;, &quot;VC&quot;), labels=c(&quot;Orange juice&quot;, &quot;Ascorbic acid&quot;), l=40) + # Use darker colors, lightness=40 ggtitle(&quot;The Effect of Vitamin C on\\nTooth Growth in Guinea Pigs&quot;) + expand_limits(y=0) + # Expand y range scale_y_continuous(breaks=0:20*4) + # Set tick every 4 theme_bw() + theme(legend.justification=c(1,0), legend.position=c(1,0)) # Position legend in bottom right tgc2 &lt;- tgc tgc2$dose &lt;- factor(tgc2$dose) ggplot(tgc2, aes(x=dose, y=len, fill=supp)) + geom_bar(position=position_dodge(), stat=&quot;identity&quot;, colour=&quot;black&quot;, # Use black outlines, size=.3) + # Thinner lines geom_errorbar(aes(ymin=len-se, ymax=len+se), size=.3, # Thinner lines width=.2, position=position_dodge(.9)) + xlab(&quot;Dose (mg)&quot;) + ylab(&quot;Tooth length&quot;) + scale_fill_hue(name=&quot;Supplement type&quot;, # Legend label, use darker colors breaks=c(&quot;OJ&quot;, &quot;VC&quot;), labels=c(&quot;Orange juice&quot;, &quot;Ascorbic acid&quot;)) + ggtitle(&quot;The Effect of Vitamin C on\\nTooth Growth in Guinea Pigs&quot;) + scale_y_continuous(breaks=0:20*4) + theme_bw() 4.4.6 Waffle Chart Show a good way to make a total classification. Although there is no direct function, it can be clarified by using the geom_tile () function. var &lt;- mpg$class # the categorical data ## Prep data (nothing to change here) nrows &lt;- 10 df &lt;- expand.grid(y = 1:nrows, x = 1:nrows) categ_table &lt;- round(table(var) * ((nrows*nrows)/(length(var)))) categ_table ## var ## 2seater compact midsize minivan pickup subcompact suv ## 2 20 18 5 14 15 26 df$category &lt;- factor(rep(names(categ_table), categ_table)) ## Plot ggplot(df, aes(x = x, y = y, fill = category)) + geom_tile(color = &quot;black&quot;, size = 0.5) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), trans = &#39;reverse&#39;) + scale_fill_brewer(palette = &quot;Set3&quot;) + labs(title=&quot;Waffle Chart&quot;, subtitle=&quot;&#39;Class&#39; of vehicles&quot;, caption=&quot;Source: mpg&quot;) + theme(panel.border = element_rect(size = 2), plot.title = element_text(size = rel(1.2)), axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), legend.title = element_blank(), legend.position = &quot;right&quot;) 4.5 Box plot 4.5.1 varwidth theme_set(theme_classic()) ggplot(mpg, aes(class, cty))+ geom_boxplot(varwidth=T, fill=&quot;plum&quot;) + labs(title=&quot;Box plot&quot;, subtitle=&quot;City Mileage grouped by Class of vehicle&quot;, caption=&quot;Source: mpg&quot;, x=&quot;Class of Vehicle&quot;, y=&quot;City Mileage&quot;) ### Reorder Reorder: To make the trend easier to see, we can reorder class based on the median value of hwy: ggplot(data = mpg) + geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))+ coord_flip() 4.5.2 Fill ggplot(mpg, aes(class, cty))+ geom_boxplot(aes(fill=factor(cyl))) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + labs(title=&quot;Box plot&quot;, subtitle=&quot;City Mileage grouped by Class of vehicle&quot;, caption=&quot;Source: mpg&quot;, x=&quot;Class of Vehicle&quot;, y=&quot;City Mileage&quot;) 4.5.3 stat=identity Cylinder3 &lt;- readRDS(file = &quot;./01_Datasets/Cylinder_Baseline.rds&quot;) library(ggplot2) ggplot(Cylinder3,aes(x=Subgroup,fill=Treatment))+ geom_boxplot(aes(lower=` Mean`-` SD`, upper=` Mean`+` SD`, middle=` Mean`, ymin=` Min`, ymax=` Max`), stat=&quot;identity&quot;)+ geom_text(aes(label=`P-Value`, x=Subgroup, y=5.5),hjust=0.4)+ coord_flip() + theme_bw() + theme(legend.position = &quot;bottom&quot;) + labs(x = &quot;Subgroups&quot;, y = &quot;Cylinder [D]&quot;, title = &quot;Subjective refraction Cylinder at Baseline&quot;) MeanRotation &lt;- readRDS(file = &quot;./01_Datasets/MeanRotation.rds&quot; ) ggplot(MeanRotation, aes(x=Visit,fill=Treatment))+ geom_boxplot(aes(lower=mean-SD, upper=mean+SD, middle=mean, ymin=min, ymax=max), stat=&quot;identity&quot;)+ geom_text(aes(label=n, x=Visit, y=mean+1.5), vjust=1.3, color=&quot;white&quot;, position = position_dodge(0.8), size=3.5)+ geom_text(aes(label=P,colour=label_color, x=Visit, y=25),hjust=0.4, size=3.5,show.legend = FALSE)+ scale_fill_brewer(palette=&quot;Paired&quot;)+ facet_wrap(.~ Subgroup, nrow = 2)+ coord_flip() + theme_bw() + theme(legend.position = &quot;bottom&quot;) + labs(x = &quot;&quot;, y = &quot;Mean absolute rotation&quot;, title = &quot;Mean absolute rotation by visit&quot;) 4.5.4 Dot + Box Plot In addition to the information provided by the box plot, you can provide clearer information in the form of summary statistics for each group. These points are interlaced to make each point represent an observation value. # plot g &lt;- ggplot(mpg, aes(reorder(manufacturer, cty, FUN = median) , cty)) g + geom_boxplot() + geom_dotplot(binaxis=&#39;y&#39;, stackdir=&#39;center&#39;, dotsize = .5, fill=&quot;red&quot;) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + theme_bw() + labs(title=&quot;Box plot + Dot plot&quot;, subtitle=&quot;City Mileage vs Class: Each dot represents 1 row in source data&quot;, caption=&quot;Source: mpg&quot;, x=&quot;Class of Vehicle&quot;, y=&quot;City Mileage&quot;) ### Violin Plot The violigogram is similar to the box pattern, but the density of the group is displayed. There is no too much information like a box line map. ggplot(mpg, aes(class, cty)) + geom_violin() + labs(title=&quot;Violin plot&quot;, subtitle=&quot;City Mileage vs Class of vehicle&quot;, caption=&quot;Source: mpg&quot;, x=&quot;Class of Vehicle&quot;, y=&quot;City Mileage&quot;) + theme_bw() 4.6 Other rendering 4.6.1 Annotation Annotation for Text, Shape # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) data %&gt;% ggplot( aes(x=date, y=value)) + geom_line(color=&quot;#69b3a2&quot;)+ annotate(geom=&quot;text&quot;, x=as.Date(&quot;2017-01-01&quot;), y=19000, label=&quot;Bitcoin price reached 20k $\\nat the end of 2017&quot;)+ annotate(geom=&quot;point&quot;, x=as.Date(&quot;2017-12-17&quot;), y=20089, size=10, shape=21, fill=&quot;transparent&quot;)+ geom_hline(yintercept=5000, color=&quot;orange&quot;, size=.5) 4.6.2 Text: ggtext Markdown in theme elements The ggtext package defines two new theme elements, element_markdown() and element_textbox(). Both behave similarly to element_text() but render the provided text as markdown/html. element_markdown() is meant as a direct replacement for element_text(), and it renders text without word wrapping. To start a new line, use the tag or add two spaces before the end of a line. ## remotes::install_github(&quot;wilkelab/ggtext&quot;) ## install.packages(&quot;ggtext&quot;) library(&quot;ggtext&quot;) library(&quot;tidyverse&quot;) library(&quot;glue&quot;) data &lt;- tibble( bactname = c(&quot;Staphylococcaceae&quot;, &quot;Moraxella&quot;, &quot;Streptococcus&quot;, &quot;Acinetobacter&quot;), OTUname = c(&quot;OTU 1&quot;, &quot;OTU 2&quot;, &quot;OTU 3&quot;, &quot;OTU 4&quot;), value = c(-0.5, 0.5, 2, 3) ) data %&gt;% mutate( color = c(&quot;#009E73&quot;, &quot;#D55E00&quot;, &quot;#0072B2&quot;, &quot;#000000&quot;), name = glue(&quot;&lt;i style=&#39;color:{color}&#39;&gt;{bactname}&lt;/i&gt; ({OTUname})&quot;), name = fct_reorder(name, value) ) %&gt;% ggplot(aes(value, name, fill = color)) + geom_col(alpha = 0.5) + scale_fill_identity() + labs(caption = &quot;Example posted on **stackoverflow.com**&lt;br&gt;(using made-up data)&quot;) + theme( axis.text.y = element_markdown(), plot.caption = element_markdown(lineheight = 1.2) ) 4.6.3 Text: ggrepel There are two important functions in ggrepel R packages: geom_label_repel() geom_text_repel() library(&quot;ggrepel&quot;) ## Take a subset of 15 random points set.seed(1234) ss &lt;- sample(1:32, 15) df &lt;- mtcars[ss, ] ## Create a scatter plot: p &lt;- ggplot(df, aes(wt, mpg)) + geom_point(color = &#39;red&#39;) + theme_classic(base_size = 10) ## Add text labels: ## Add text annotations using ggplot2::geom_text p + geom_text(aes(label = rownames(df)), size = 3.5) ## Use ggrepel::geom_text_repel require(&quot;ggrepel&quot;) set.seed(42) p + geom_text_repel(aes(label = rownames(df)), size = 3.5) ## Change color by groups p + geom_label_repel(aes(label = rownames(df), fill = factor(cyl)), color = &#39;white&#39;, size = 3.5) + theme(legend.position = &quot;bottom&quot;) ## With selection # Data are available in the gapminder package library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% select(-year) # prepare data tmp &lt;- data %&gt;% mutate( annotation = ifelse(gdpPercap &gt; 5000 &amp; lifeExp &lt; 60, &quot;yes&quot;, &quot;no&quot;)) # plot tmp %&gt;% ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) + geom_point(alpha=0.7) + theme(legend.position=&quot;none&quot;) + geom_text_repel(data=tmp %&gt;% filter(annotation==&quot;yes&quot;), aes(label=country), size=4 ) 4.6.4 Arrage: gridExtra ## assemble multiple plots on a page is to use the grid.arrange() function library(gridExtra) p1 &lt;- qplot(mpg, wt, data = mtcars, colour = cyl) p2 &lt;- qplot(mpg, data = mtcars) + ggtitle(&quot;title&quot;) grid.arrange(p1, p2, nrow = 1) ## Tables and other grobs grid.arrange( tableGrob(mtcars[1:4, 1:4]), p2, ncol = 2, widths = c(1.5, 1), clip = FALSE ) 4.6.5 Interactive charts: plotly # load data library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% select(-year) # Interactive version library(plotly) p &lt;- data %&gt;% mutate(myText=paste(&quot;This country is: &quot; , country )) %&gt;% ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=myText)) + geom_point(alpha=0.7) ggplotly(p, tooltip=&quot;text&quot;) 4.7 DiagrammeR 4.7.1 Basic flowchart using grViz library(&quot;DiagrammeR&quot;) grViz(&quot;digraph flowchart { # node definitions with substituted label text node [fontname = Helvetica, shape = rectangle] tab1 [label = &#39;@@1&#39;] tab2 [label = &#39;@@2&#39;] tab3 [label = &#39;@@3&#39;] tab4 [label = &#39;@@4&#39;] tab5 [label = &#39;@@5&#39;] # edge definitions with the node IDs tab1 -&gt; tab2 -&gt; tab3 -&gt; tab4 -&gt; tab5; } [1]: &#39;Questionnaire sent to n=1000 participants&#39; [2]: &#39;Participants responded to questionnaire n=850&#39; [3]: &#39;Participants came to clinic for evaluation n=700&#39; [4]: &#39;Participants eligible for the study n=600&#39; [5]: &#39;Study sample n=600&#39; &quot;) grViz(&quot;digraph flowchart { # node definitions with substituted label text node [fontname = Helvetica, shape = rectangle] tab1 [label = &#39;@@1&#39;] tab2 [label = &#39;@@2&#39;] tab3 [label = &#39;@@3&#39;] tab4 [label = &#39;@@4&#39;] tab5 [label = &#39;@@5&#39;] # edge definitions with the node IDs tab1 -&gt; tab2; tab2 -&gt; tab3; tab2 -&gt; tab4 -&gt; tab5 } [1]: &#39;Questionnaire sent to n=1000 participants&#39; [2]: &#39;Participants came to clinic for evaluation n=700&#39; [3]: &#39;Participants non-eligible for the study n=100&#39; [4]: &#39;Participants eligible for the study n=600&#39; [5]: &#39;Study sample n=600&#39; &quot;) 4.7.2 Graphviz Attributes Node Attributes Edge Attributes Colors Node Shapes Arrow Shapes See more under Graphviz and mermaid in DiagrammeR grViz(diagram = &quot;digraph flowchart { # define node aesthetics node [fontname = Arial, shape = oval, color = Lavender, style = filled] tab1 [label = &#39;@@1&#39;] tab2 [label = &#39;@@2&#39;] tab3 [label = &#39;@@3&#39;] tab4 [label = &#39;@@4&#39;] # set up node layout tab1 -&gt; tab2; tab2 -&gt; tab3; tab2 -&gt; tab4 } [1]: &#39;Learning Data Science&#39; [2]: &#39;Industry vs Technical Knowledge&#39; [3]: &#39;Python/R&#39; [4]: &#39;Domain Experience&#39; &quot;) grViz(&quot;digraph { graph [layout = dot, rankdir = LR] # define the global styles of the nodes. We can override these in box if we wish node [shape = rectangle, style = filled, fillcolor = Linen] data1 [label = &#39;Dataset 1&#39;, shape = folder, fillcolor = Beige] data2 [label = &#39;Dataset 2&#39;, shape = folder, fillcolor = Beige] process [label = &#39;Process \\n Data&#39;] statistical [label = &#39;Statistical \\n Analysis&#39;] results [label= &#39;Results&#39;] # edge definitions with the node IDs {data1 data2} -&gt; process -&gt; statistical -&gt; results }&quot;) 4.7.3 Gantt chart # Define the Gantt chart and plot the result (not shown) mermaid(&quot;gantt Section Initiation Planning :a1, 2016-01-01, 10d Data processing :after a1, 30d Data analysis :b1, 2016-03-01, 15d&quot;) 4.8 ggstatsplot ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the plots themselves and targeted primarily at behavioral sciences community to provide a one-line code to produce information-rich plots. https://indrajeetpatil.github.io/ggstatsplot/articles/ Patil, I. (2021). Visualizations with statistical details: The ggstatsplot approach. Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167 4.8.1 ggbetweenstats to check if a continuous variable differs across multiple groups/conditions to compare distributions visually and check for outliers library(gapminder) dplyr::glimpse(x = gapminder::gapminder) ## Rows: 1,704 ## Columns: 6 ## $ country &lt;fct&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, ~ ## $ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, ~ ## $ year &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, ~ ## $ lifeExp &lt;dbl&gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8~ ## $ pop &lt;int&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12~ ## $ gdpPercap &lt;dbl&gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, ~ ## since the confidence intervals for the effect sizes are computed using ## bootstrapping, important to set a seed for reproducibility ## for reproducibility set.seed(123) library(ggstatsplot) ## plot ggbetweenstats( data = iris, x = Species, y = Sepal.Length, title = &quot;Distribution of sepal length across Iris species&quot; ) "]]
