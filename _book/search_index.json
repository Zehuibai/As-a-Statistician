[["data-management-in-sas.html", "Chapter 2 Data Management in SAS 2.1 Input data into SAS 2.2 Format the variables 2.3 Array 2.4 Retain 2.5 Names and Types 2.6 Data utilities 2.7 Check for validation 2.8 Log 2.9 Proc Transpose 2.10 Clean Up", " Chapter 2 Data Management in SAS 2.1 Input data into SAS 2.1.1 Native datasets input libname libref &quot;dir_location&quot;; data ds; set libref.sasfilename; /* Note: no file extension */ ... run; data ds; set &quot;dir_location\\sasfilename.sas7bdat&quot;; /* Windows only */ set &quot;dir_location/sasfilename.sas7bdat&quot;; /* works on all OS including Windows */ run; 2.1.2 Reading free formatted data instream DATA data1; INPUT make $ model $ mpg weight price; CARDS; AMC Concord 22 2930 4099 AMC Pacer 17 3350 4749 AMC Spirit 22 2640 3799 Buick Century 20 3250 4816 Buick Electra 15 4080 7827 ; RUN; 2.1.3 Reading fixed formatted data instream It need to provide the beginning and ending column numbers for each variable. DATA data2; INPUT make $ 1-5 model $ 6-12 mpg 13-14 weight 15-18 price 19-22; CARDS; AMC Concord2229304099 AMC Pacer 1733504749 AMC Spirit 2226403799 BuickCentury2032504816 BuickElectra1540807827 ; RUN; 2.1.4 INFILE: Reading fixed formatted data from an external file The data3.dat file: AMC Concord2229304099 AMC Pacer 1733504749 AMC Spirit 2226403799 BuickCentury2032504816 BuickElectra1540807827 DATA cars3; INFILE &quot;~/path/data3.dat&quot;; INPUT make $ 1-5 model $ 6-12 mpg 13-14 weight 15-18 price 19-22; RUN; *** with special (comma) delimited *** tab delimited: DELIMITER=&#39;09&#39;x; *** comma delimited: delimiter=&#39;,&#39;; AMC,Concord,22,2930,4099 AMC,Pacer,17,3350,4749 AMC,Spirit,22,2640,3799 Buick,Century,20,3250,4816 Buick,Electra,15,4080,7827 DATA cars5; INFILE &quot;~/path/data3.dat&quot; delimiter=&#39;,&#39;; INPUT make $ model $ mpg weight price; RUN; 2.1.5 Write the SAS File libname diss &#39;c:dissertation&#39;; data diss.salary; input sal1996-sal2000 ; cards; 10000 10500 11000 12000 12700 14000 16500 18000 22000 29000 ; run; data &#39;c:dissertationsalarylong&#39;; input Salary1996-Salary2000 ; cards; 10000 10500 11000 12000 12700 14000 16500 18000 22000 29000 ; run; 2.1.6 Import csv data PROC IMPORT datafile=&quot;Z:\\path\\data4.csv&quot; out=outname dbms=csv replace; delimiter=&quot;;&quot;; getnames=yes; Guessingrows=MAX; RUN; 2.1.7 %Import Import all SAS datasets available in a specific folder Macro Variables Description folder_path File path with the data that are to be imported; delete_all If delete_all is unequal 1 then all datasets in the work-library are deleted, else if it is 1 no datasets are deleted; fname&amp;i Macro variable that contains the dataset name total Number of all datasets within a folder %macro Import (folder_path, delete_all); *** delete all datasets if delete_all is 1; %if &amp;delete_all ne 1 %then %do; proc datasets library=work kill nolist; run; quit; dm log &#39;clear&#39;; %end; libname IMPORT &quot;&amp;folder_path&quot;; *** definition of folder with the datasets; proc sql; create table m_dataset_list as select distinct memname from dictionary.tables where libname=&quot;IMPORT&quot; and memtype=&quot;DATA&quot;; quit; *** declare macro variables containing the name of a dataset in the specified folder and their overall number; data m_dataset_list; set m_dataset_list end=last; retain i 0; i=i+1; call symput(&#39;fname&#39;||trim(left(put(i,8.))),scan(trim(memname),1,&#39;.&#39;)); if last then call symput(&#39;total&#39;,trim(left(put(i,8.)))); run; *** import by means of the macro variables defined above ; libname libdata &quot;&amp;folder_path&quot;; libname library (libdata); %do i=1 %to &amp;total; data work.&amp;&amp;fname&amp;i; set libdata.&amp;&amp;fname&amp;i; run; %end; %mend Import; %Import (folder_path=Z:\\...\\, delete_all=); 2.1.8 URL filename urlhandle url &#39;http://www.math.smith.edu/sas/testdata&#39;; filename urlhandle url &#39;http://www.math.smith.edu/sas/testdata&#39; user=&#39;your_username&#39; pass=&#39;your_password&#39;; proc import datafile=urlhandle out=ds dbms=dlm; run; 2.1.9 Infile Read multiple raw data files * data step to read in data; data mydata; length inname $ 100; input inname $; infile dummy filevar=inname end=EOF; do until (EOF); * PUT YOUR INPUT STATEMENT HERE TO READ IN YOUR DATA; input year 1-4 name $ 6-28 party $ 30-34 born 35-38 died 40-43 age 45-46 stborn $ 48-49 stelec $ 51-52 religion $ 54-65 elecvote 67-69 popvote 71-78; * DO ANY PROCESSING OF THE DATA HERE (E.G. COMPUTING NEW VARIABLES); output; end; cards; c:winners1.txt c:winners2.txt run; 2.1.10 Generate automatic file name If you create multiple data sets in SAS, you may want to name them in an automated way. How to create a file name based on date and time. Such a file naming process will 1) prevent you from providing the same file name to two different data sets, and 2) allow you to see when the file was first created. data tsave; do i = 1 to 10; do time = 1 to 5; y = rannor(1232+i + time); output; end; end; run; data _null_; cdate = &quot;&amp;SYSDATE9&quot;; ctime = &quot;&amp;SYSTIME&quot;; time_string = cdate||&quot;_&quot;||translate(ctime, &quot;_&quot;, &quot;:&quot;); call symput(&#39;mytime&#39;, time_string); run; data &quot;c:tempnewdata_&amp;mytime&quot;; set tsave; run; 2.2 Format the variables 2.2.1 Proc format proc format; value eye_CAT 1 = &quot;OD&quot; 2 = &quot;OS&quot;; value AR_CAT 1 = &quot;^{unicode 2264} 3° absolute rotation&quot; 2 = &quot;^{unicode 2264} 5° absolute rotation&quot; 3 = &quot;^{unicode 2264} 7° absolute rotation&quot; 4 = &quot;^{unicode 2264} 10° absolute rotation&quot; 5 = &quot;^{unicode 2264} 20° absolute rotation&quot; 6 = &quot;^{unicode 2264} 30° absolute rotation&quot;; run; 2.2.2 Copy and combine SAS format libraries libname first &quot;etempdata1&quot;; libname second &quot;etempdata2&quot;; proc catalog cat=first.FORMATS; copy out=second.FORMATS; run; 2.2.3 Build a format from a dataset Outcode Outname 101 Aberdeen 102 Altrincham 103 Ashford 104 Barnsley 105 Basildon 106 Basingstoke 107 BathFirst data work.outfmt(keep=start label fmtname); set work.outlets(rename=(outcode=start outname=label)); fmtname=&#39;outfmt&#39;; run; proc format library=work cntlin=work.outfmt; run; 2.2.4 Output format as datasets proc format library=work cntlout=format_dataset; run; ,0 2.2.5 Delete the format proc catalog catalog=work.formats; delete eye_CAT.format Visit_CAT.format; run; 2.2.6 CAT connect string variables data test; infile cards missover; length first last $20; input first $ last $ ; datalines; jone smith john wayne bill phil hodge ; run; data test2; set test; name = catx(&quot;, &quot;, of last first ); name1 = cat(of last first); name2 = cats(of last first); /*leading and trailing blanks*/ name3 = catt(of last first); /*trailing blanks*/ run; proc print data = test2; run; ############################################################################## Obs first last name name1 name2 name3 1 jone smith smith, jone smith jone smithjone smithjone 2 john wayne wayne, john wayne john waynejohn waynejohn 3 bill bill bill bill bill 4 phil hodge hodge, phil hodge phil hodgephil hodgephil Submit this file to define the %CLASSIFY macro. You may then invoke the macro to process the output data set from LOGISTIC or PROBIT. The EXAMPLE section below shows how to invoke the macro. The following parameters are required when using the macro: data= Name of LOGISTIC or PROBIT OUT= data set. If not specified, the last data set created is used. response= Name of response variable used in LOGISTIC or PROBIT. p= Name of PREDICT= variable in OUT= data set. The following parameters are optional: threshld=0 Minimum predicted probability which must be attained for an observation to be classified into a response level. The specified value must be between 0 and 1. predname=_predlvl Names the variable in the OUT= data set containing the predicted response level. Do not use the same name as given in the P= parameter. If not specified, the variable is named _PREDLVL. out=classout Names the output data set containing individual-level predicted probabilities and the predicted response level. If not specified, the data set is named CLASSOUT. /* Catenate a set of variable values, with a specified separator. Useful for situations were you need to combine a number of factor variables into a single variable, e.g., to plot means for the combinations of two or more factors. V9 has the function catx(sep, str1, str2, ...), that does something similar, and other functions, cat(str1, ...), cats(str1, ...), catt(str1, ...) that don&#39;t provide an explicit separator argument. */ %macro cat( data=_last_, /* input dataset */ var=, /* list of variables to be concatenated */ catvar=, /* output result variable */ sep=:, /* separator string */ length=, /* length of result variable */ out=&amp;data /* name of output dataset */ ); %local catstr i v; data &amp;out; set &amp;data; %if %length(&amp;length) %then %do; length &amp;catvar $ &amp;length; %end; %let catstr = trim(left(%scan(&amp;var,1,%str( )))); %let i=2; %let v=%scan(&amp;var, &amp;i, %str( )); %do %while (%length(&amp;v) &gt; 0 ); %let catstr = &amp;catstr || &quot;&amp;sep&quot; || trim(left(%scan(&amp;var,&amp;i,%str( )))); %let i = %eval(&amp;i+1); %let v=%scan(&amp;var, &amp;i, %str( )); %end; %*put CAT: &amp;catvar = &amp;catstr; &amp;catvar = &amp;catstr; %mend; 2.2.7 %Combine The COMBINE macro combines two or more variables (characters or numbers) into one variable. This is useful in situations where two or more CLASS variables are needed but some procedures or macros only handle one. It is also very convenient for plots in tabular form Var Des. DATA= The name of the input data set [Default: DATA=LAST] VAR= List of two or more variables to be combined. required RESULT= The name of the result variable. [Default: RESULT=ID] WHERE= Otional WHERE clause to subset the observations written to the OUT= data set. SEP= Separator character(s), inserted between adjacent values [Default: SEP=:] ABBREV= If specified, each character variable in VAR= is truncated to this length in RESULT. To specify different truncation lengths, use a list of numbers, whose order corresponds to the VAR= variables, e.g., ABBREV=2 2 4. LENGTH= If specified, the RESULT= variable is truncated to this total length, regardless of the ABBREV= setting. USEFMT= If postive, numeric variables which have formats stored in the data set have their formatted values combined. [Default: USEFMT=0] IGNMISS= Ignore missing values? OUT= The name of the output data set. The default (OUT=&amp;data) means that the input data set is replaced. [Default: OUT=&amp;data] %macro combine( data=_last_, /* name of input dataset */ var=, /* list of variables to be combined */ where=, /* WHERE clause to subset the data */ result=_id_, /* result variable */ sep=:, /* separator character */ abbrev=, /* abbreviated length of each char variable */ length=, /* max total length of RESULT */ usefmt=0, /* use formats for numeric variables? */ ignmiss=0, /* ignore missing values? */ out=&amp;data /* name of output dataset */ ); %let var=%upcase(&amp;var); %*let var=%vexpand(&amp;var); *-- Uncomment to make this work for VAR=X1-X5; %let nv=%words(&amp;var,root=_v_); *-- Get number of VAR= variables, create _v_1 ... ; %if %upcase(&amp;data)=_LAST_ %then %let data=&amp;syslast; /* %if &amp;nv &lt; 2 %then %do; data &amp;out; set &amp;data; %if &amp;usefmt %then %do; _fmt_=vformat(&amp;var); put _fmt_=; if vtype(&amp;var)=&#39;N&#39; then &amp;result=left(trim(put(&amp;var, _fmt_)); else &amp;result = &amp;var; %end; %else %do; &amp;result = &amp;var; %end; run; %put WARNING: Only &amp;nv VAR= variable was specified. &amp;data has been copied to &amp;out; %goto done; %end; %*put nv=&amp;nv; */ options nonotes; proc contents data=&amp;data noprint out=_vars_(keep=name type format length); run; data _null_; set _vars_ end=eof; %do i=1 %to &amp;nv; if upcase(name) = upcase(&quot;&amp;&amp;_v_&amp;i&quot;) then do; call symput(&#39;_t_&#39;||&quot;&amp;i&quot;, put(type,1.0)); if format ^= &#39; &#39; and index(format,&#39;.&#39;)=0 then format=trim(format)||&#39;.&#39;; call symput(&#39;_f_&#39;||&quot;&amp;i&quot;, format); * put name= format=; len + length+%length(&amp;sep); end; %end; if eof then do; call symput(&#39;_len_&#39;, left(put(len, 8.0))); end; run; %if %length(&amp;length)&gt;0 %then %do; %if %verify(&amp;length, %str(0123456789))=0 %then %let _len_ = &amp;length; %end; %if %length(&amp;abbrev)&gt;0 %then %do; %if %verify(&amp;abbrev, %str(0123456789 ))&gt;0 %then %do; %put WARNING: Non-numeric ABBREV= &amp;abbrev has been ignored.; %let abbrev=; %end; %end; %put COMBINE: Length of &amp;result = &amp;_len_; options notes; data &amp;out; set &amp;data; %if %length(&amp;where) %then %do; where &amp;where; %end; length &amp;result $&amp;_len_;; &amp;result = &#39;&#39;; %let s=; %do i=1 %to &amp;nv; %if &amp;i&gt;1 &amp; %length(&amp;sep)&gt;0 %then %do; &amp;result = trim(&amp;result) || trim(&quot;&amp;sep&quot;); %end; %if &amp;&amp;_t_&amp;i = 1 %then %do; /* numeric */ length _tmp_ $&amp;_len_;; drop _tmp_ ; %if &amp;ignmiss&gt;0 %then %do; if not missing(&amp;&amp;_v_&amp;i) then do; %end; %if &amp;usefmt&gt;0 and %length(&amp;&amp;_f_&amp;i)&gt;0 %then %do; _tmp_ = left(put(&amp;&amp;_v_&amp;i, &amp;&amp;_f_&amp;i)); %end; %else %do; _tmp_ = left(put(&amp;&amp;_v_&amp;i, best8.)); %end; &amp;result = trim(&amp;result) || _tmp_; %if &amp;ignmiss&gt;0 %then %do; end; %end; %end; /* numeric */ %else %do; /* character */ %if %length(&amp;abbrev)&gt;0 %then %do; %let ab = %scan(&amp;abbrev,&amp;i); %if &amp;ab= %then %let ab= %scan(&amp;abbrev,1); &amp;result = trim(&amp;result) || substr(&amp;&amp;_v_&amp;i,1,min(&amp;ab,length(&amp;&amp;_v_&amp;i))); %end; %else %do; &amp;result = trim(&amp;result) || &amp;&amp;_v_&amp;i; %end; %end; /* character */ %next: %end; run; %done: %mend; %macro words(string,root=); %*--------------------------------------------------; %* Return number of words in string. If root ^&#39; &#39;, ; %* then create global variables starting with root. ; %*--------------------------------------------------; %local count word; %let count=1; %let word = %scan(&amp;string,&amp;count,%str( )); %do %while(&amp;word^= ); %*put WORDS: word=&amp;word; %if &amp;root^= %then %do; %global &amp;root&amp;count; %let &amp;root&amp;count=&amp;word; %end; %let count = %eval(&amp;count+1); %let word = %scan(&amp;string,&amp;count,%str( )); %end; %eval(&amp;count-1) %mend words; data design; do task = &#39;EASY&#39;, &#39;HARD&#39;; do dose = ., 0 to 2; do try = &quot;BIG&quot;,&quot;SMALL&quot;; output; end; end; end; run; %combine(data=design, var=task dose try, SEP= _, out=test); bs task dose try id 1 EASY . BIG EASY_._BIG 2 EASY . SMA EASY_._SMA 3 EASY 0 BIG EASY_0_BIG 4 EASY 0 SMA EASY_0_SMA 5 EASY 1 BIG EASY_1_BIG 2.3 Array 2.3.1 Defining array array-name {n} &lt;$&gt;&lt;length&gt; &lt;array-elements&gt; &lt;(initial-value-list)&gt;; \\[ \\begin{array}{|l|l|} \\hline \\text { Component } &amp; \\text { Description } \\\\ \\hline \\text { array-name } &amp; \\text { a valid SAS name that will be used to identify the group of variables } \\\\ \\hline \\mathrm{n} &amp; \\begin{array}{l} \\text { a subscript that refers to the number of elements or variables in the array that should be enclosed in either } \\\\ \\text { parentheses ( ), braces }\\{\\} \\text { , or brackets [ ] } \\end{array} \\\\ \\hline \\$ &amp; \\text { a component added to the statement to specify that the elements within the array are of character type } \\\\ \\hline \\text { length } &amp; \\text { a common length of the elements in the array } \\\\ \\hline \\text { array-elements } &amp; \\text { a list of the variables to be part of the array that must be all the same type, either all numeric or all character } \\\\ \\hline \\text { initial-value-list } &amp; \\text { a list of initial values for each of the array elements } \\\\ \\hline \\end{array} \\] simple examples array charsamp {5} $ 10 varc1 varc2 varc3 varc4 varc5; array numsamp (*) var1 var2 var3; array initsamp [2] $ init1 init2 (A, B); Using Arrays in simple iterative DO loop do i=1 to 5; if numsamp[i] =. then numsamp[i] = 0; end; do i=1 to dim(numsamp); if numsamp[i] =. then numsamp[i] = 0; end; 2.3.2 Format multiple variables data sample_sae2; set sample_sae1; array saen {*} _aesdth _aeslife _aeshosp _aesdisab _aescong _aesmie; array saec {*} $1 aesdth aeslife aeshosp aesdisab aescong aesmie; do i=1 to dim(saec); if saen{i} = 1 then saec{i} = &#39;Y&#39;; else if saen{i} = 0 then saec{i} = &#39;N&#39;; end; run; Custom Formats proc format; value YN 1 = &#39;Y&#39; 0 = &#39;N&#39;; run; do i=1 to dim(saec); if ~missing(saen{i}) then saec{i} = put(saen{i},yn.); end; Format the summary statistics length contivar $200. n_c mean_c std_c min_c q1_c median_c q3_c max_c $100.; contivar =&quot;&quot;; array stat_num {*} n nmiss mean std min q1 median q3 max; array stat_char {*} n_c nmiss_c mean_c std_c min_c q1_c median_c q3_c max_c; *** make sure only variable no mis, otherwise variable miss is uninitialized; if n ne . then n_c = strip(put(round(n,1.),8.)); if nmiss ne . then nmiss_c = strip(put(round(nmiss,1.),8.)); if mean ne . then Mean_c = strip(put(round(mean,0.001),8.3)); if std ne . then Std_c = strip(put(round(std,0.001),8.3)); if min ne . then Min_c = strip(put(round(min,0.01),8.2)); if q1 ne . then Q1_c = strip(put(round(q1,0.001),8.3)); if median ne . then Median_c = strip(put(round(median,0.001),8.3)); if Q3 ne . then Q3_c = strip(put(round(q3,0.001),8.3)); if Max ne . then Max_c = strip(put(round(max,0.01),8.2)); if nmiss ne . then nmiss_p = divide (nmiss,_freq_); if nmiss ne . then nmiss_p_c = &quot;^R/RTF&#39;\\ql&#39; &quot; ||&quot; &quot; || strip(&quot;(&quot; || put(round (nmiss_p*100,0.1),5.1) || &quot;)&quot;); do stat=1 to dim(stat_char); if stat_num[stat] ge 100 then stat_char[stat] = &quot;^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); else if stat_num[stat] ge 10 then stat_char[stat] = &quot; ^_^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); else if stat_num[stat] ge 0 then stat_char[stat] = &quot; ^_^_^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); else if stat_num[stat] le -100 then stat_char[stat] = &quot;^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); else if stat_num[stat] le -10 then stat_char[stat] = &quot;^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); else if stat_num[stat] ge -1 then stat_char[stat] = &quot;^_^R/RTF&#39;\\qr&#39; &quot; || strip(stat_char[stat]); end; 2.3.3 2*2 arrays data anon_D06_glossary; LENGTH Description $200.; *** 6 Groups (COLs), max. 4 Subgroups (ROWs); array grps_subgrps{5,6} ( 0 1 2 3 4 5 01 11 21 31 41 51 . 12 22 32 . . . . . 33 . . . . . 34 . .); do i = 1 to dim2(grps_subgrps); IF grps_subgrps[1,i] EQ &amp;GROUP. THEN DO; do j = 2 to dim1(grps_subgrps); if grps_subgrps[j,i] ne . then do; Description = &amp;label.; GROUP = grps_subgrps[1,i]; SUBGROUP = grps_subgrps[j,i]; output; end; end; END; end; drop grps_subgrps: i j; set anon_D06_fmt (in = a); run; 2.3.4 Dynamic Element List using Macro Variables proc sql noprint; select distinct NAME into :NEWFLAGS separated by &quot; &quot; from dictionary.columns where libname = &quot;WORK&quot; and memname = &quot;SAMPLEPROC1&quot; and upcase(NAME) contains &quot;_FLAG&quot;; quit; array newfl {*} &amp;newflags.; 2.3.5 Carry over values array visit{*} visit_:; do i=2 to dim(visit); if missing(visit{i}) then visit{i} = visit{i-1}; end; 2.3.6 Summary sums PROC SUMMARY DATA=wide; VAR Measure1-Measure4; OUTPUT OUT=sums(DROP = _type_ _freq_) SUM = Sum1-Sum4; RUN; /*********************************/ /*********************************/ DATA sums; SET wide END=last; ARRAY _measure{*} measure1-measure4; ARRAY _sum{*} Sum1-Sum4; KEEP sum1-sum4; DO i = 1 TO 4; _sum{i} + _measure{i}; end; IF last THEN OUTPUT; RUN; %MACRO selectsums(maxindex=); %DO n = 1 %TO &amp;maxindex; SUM(measure&amp;n) as Sum&amp;n %IF &amp;n NE &amp;maxindex %THEN , ; %END; %MEND selectsums; PROC SQL; CREATE TABLE sums AS SELECT %selectsums(maxindex=4) FROM wide ; QUIT; 2.4 Retain 2.4.1 Generate Serial Number data abcd; input x y; cards; 1 25 1 28 1 27 2 23 2 35 2 34 3 25 3 29 ; run; data aaa; set abcd; retain z 0; z = z + 1; run; ***Cumulative Score; data aaa; set abcd; retain z 0; z = z + y; run; ***Generate Serial Number by Group; proc sort data = abcd; by x; run; data aaa; set abcd; retain z; if first.x then z = 1; else z = z + 1; by x; run; 2.4.2 Change from Basilne data data_a; set data_b; by RD_IOL_TYP subject_id eye Visit; *** calculate the CFB and CFM1; retain baseline baseline2; if first.eye then do; baseline = .; baseline2=.; end; if first.eye and &amp;var. ne . then do; if Visit = 1 then baseline = &amp;var.; end; if VISIT = 5 and &amp;var. ne . then do; baseline2 = &amp;var.; end; if &amp;var. ne . then do; if baseline ne . or baseline2 ne . then do; if VISIT = 5 and baseline ne . then CFB1 = &amp;var. - baseline; *** split CFB off, better for report; if VISIT = 6 and baseline ne . then CFB2 = &amp;var. - baseline; if VISIT = 6 and baseline2 ne . then CFM1 = &amp;var. - baseline2; end; end; keep RD_IOL_TYP subject_id eye visit &amp;var. CFB1 CFB2 CFM1 ITT PP; run; 2.5 Names and Types 2.5.1 Convert all numeric to char* /*** macro to convert all numeric to char ***/ %macro vars(ds_in, ds_out); %let list=; %let type=; %let dsid=%sysfunc(open(&amp;ds_in)); %let cnt=%sysfunc(attrn(&amp;dsid,nvars)); %do i = 1 %to &amp;cnt; %let list=&amp;list %sysfunc(varname(&amp;dsid,&amp;i)); %let type=&amp;type %sysfunc(vartype(&amp;dsid,&amp;i)); %end; %let rc=%sysfunc(close(&amp;dsid)); data &amp;ds_out(drop= %do i = 1 %to &amp;cnt; %let temp=%scan(&amp;list,&amp;i); _&amp;temp %end;); set &amp;ds_in(rename=( %do i = 1 %to &amp;cnt; %let temp=%scan(&amp;list,&amp;i); &amp;temp=_&amp;temp %end;)); %do j = 1 %to &amp;cnt; %let temp=%scan(&amp;list,&amp;j); /** Change C to N for numeric to character conversion **/ %if %scan(&amp;type,&amp;j) = N %then %do; /** Also change INPUT to PUT for numeric to character **/ ***&amp;temp=PUT(_&amp;temp,8.); &amp;temp=strip(vvalue(_&amp;temp)); %end; %else %do; &amp;temp=_&amp;temp; %end; %end; run; %mend vars; %vars(VENUS_L12_2_4_1_D02, VENUS_L12_2_4_1_D03) 2.5.2 Get all the numeric variable names proc transpose data=VENUS_L12_2_4_1_D02(obs=0) out=charvars; var _character_; run; proc transpose data=VENUS_L12_2_4_1_D02(obs=0) out=numvars; var _numeric_; run; proc sql noprint; select _name_ into :charvars separated by &#39; &#39; from charvars; select _name_ into :numvars separated by &#39; &#39; from numvars; quit; run; %put NOTE: CHARVARS=&amp;charvars; %put NOTE: NUMVARS=&amp;numvars; proc sql noprint; select sub_reference into :subnum1 - :subnum4 from VENUS_T8_2_3_6_D03a_sub; select sub_reference into :subnum separated by &#39;,&#39; from VENUS_T8_2_3_6_D03a_sub; quit; run; %put &amp;subnum1.; %put &amp;subnum.; Alternative data want_num(keep=_NUMERIC_) want_char(keep=_CHARACTER_); set SASHELP.class; run; proc sql; create table char as select * from sashelp.class (keep=_char_) ; create table num as select * from sashelp.class (keep=name _numeric_) ; quit; 2.5.3 Write all variable names as macro variables Concatenate multiple cols into a single value %macro M_VariableName_Content (ds_in, name, count_var, dataset_var); %macro HL; %mend HL; %global &amp;&amp;count_var.; %global &amp;&amp;dataset_var.; proc contents data = &amp;ds_in. out = &amp;ds_in._content noprint; run; proc sort data = &amp;ds_in._content out = &amp;ds_in._content (keep = &amp;NAME.); by VARNUM; run; *** count the number of variable; data _null_; set &amp;ds_in._content end=eof; retain counter 0; counter = counter + 1; if eof then call symputx(&quot;&amp;count_var.&quot;, counter); run; proc transpose data = &amp;ds_in._content out = &amp;ds_in._content; var &amp;NAME.; run; data &amp;ds_in._content; length concat $1000.; set &amp;ds_in._content; concat = catx(&quot; &quot;, of COL1-COL&amp;n_col_count.); call symput(&quot;&amp;dataset_var.&quot;, concat); run; proc datasets library=work; delete &amp;ds_in._content; run; %mend M_VariableName_Content; Alternative: creating a long list of variable names based on an abbreviated one /*************************************************** slist: an abbreviated list of variable names can be any SAS variable list flist: a global macro variable that is the expanded variable name list ***************************************************/ %macro varlist(data, slist); data _tiny_; set &amp;data; keep &amp;slist; run; proc sql noprint; select name into :myvarlist separated by &quot; &quot; from sashelp.vcolumn where libname=&quot;WORK&quot; and memname=&quot;_TINY_&quot;; quit; %let flist = &amp;myvarlist; %mend; data test; array v(10); do j = 1 to 5; do i = 1 to 10; v(i) = i*5*j; ind = (i*j &gt;30); end; output; end; run; %global flist; %varlist(test, v:); %put &amp;flist; ################################ %put &amp;flist; v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 2.5.4 Write all observations as macro variable *** Alternative1; data _null_; set sashelp.class; suffix=put(_n_,5.); call symput(cats(&#39;Name&#39;,suffix), Name); run; *** Alternative2; proc sql noprint; select Name into :Name1-:Name19 from SAShelp.class; quit; *** Alternative3; proc sql noprint; select count(*) into :NObs from SAShelp.class; select Name into :Name1-:Name%left(&amp;NObs) from SAShelp.class; quit; *** do a separate analysis for each macro variabe; %macro doit; %do i=1 %to &amp;NObs; %put # # # Processing &amp;&amp;Name&amp;i # # #; %* ---- Analysis Code Goes Here ----- *; %end; %mend; %doit; MANY MACRO VARIABLES data _null_; set sashelp.class; suffix=put(_n_,5.); array xxx{*} _numeric_; do i =1 to dim(xxx); *** VNAME returns the name of the specified variable; call symput(cats(vname(xxx[i]),suffix),xxx[i]); end; array yyy{*} $ _character_; do i =1 to dim(yyy); call symput(cats(vname(yyy[i]),suffix),yyy[i]); end; run; %put &amp;weight1; %macro doit; %let id=%sysfunc(open(sashelp.class)); %let NObs=%sysfunc(attrn(&amp;id,NOBS)); %syscall set(id); %do i=1 %to &amp;NObs; %let rc=%sysfunc(fetchobs(&amp;id,&amp;i)); %put # # # Processing &amp;Name # # #; %* ---- Analysis Code Goes Here ----- *; %end; %let id=sysfunc(close(&amp;id)); %mend; 2.5.5 Select Character and numeric variables proc sql noprint; select distinct NAME into :NUM_LIST separated by &quot;,&quot; from DICTIONARY.COLUMNS where LIBNAME=&quot;SASHELP&quot; and MEMNAME=&quot;CLASS&quot; and TYPE=&quot;num&quot;; select distinct NAME into :CHAR_LIST separated by &quot;,&quot; from DICTIONARY.COLUMNS where LIBNAME=&quot;SASHELP&quot; and MEMNAME=&quot;CLASS&quot; and TYPE ne &quot;num&quot;; create table WANT_NUM as select &amp;NUM_LIST. from SASHELP.CLASS; create table WANT_CHAR as select &amp;CHAR_LIST. from SASHELP.CLASS; quit; /*** Oder ***/ data want_num(keep=_NUMERIC_) want_char(keep=_CHARACTER_); set SASHELP.class; run; proc sql; create table char as select * from sashelp.class (keep=_char_) ; create table num as select * from sashelp.class (keep=name _numeric_) ; quit; 2.5.6 Rename some variables data faminc; input famid faminc1-faminc12 ; cards; 1 3281 3413 3114 2500 2700 3500 3114 -999 3514 1282 2434 2818 2 4042 3084 3108 3150 -999 3100 1531 2914 3819 4124 4274 4471 3 6015 6123 6113 -999 6100 6200 6186 6132 -999 4231 6039 6215 ; run; %macro rename1(oldvarlist, newvarlist); %let k=1; %let old = %scan(&amp;oldvarlist, &amp;k); %let new = %scan(&amp;newvarlist, &amp;k); %do %while((&quot;&amp;old&quot; NE &quot;&quot;) &amp; (&quot;&amp;new&quot; NE &quot;&quot;)); rename &amp;old = &amp;new; %let k = %eval(&amp;k + 1); %let old = %scan(&amp;oldvarlist, &amp;k); %let new = %scan(&amp;newvarlist, &amp;k); %end; %mend; data a ; set faminc; %rename1(faminc1 faminc2, a b); run; proc print data = a heading= h noobs; run; 2.5.7 Rename with suffix data faminc; input famid faminc1-faminc12 ; cards; 1 3281 3413 3114 2500 2700 3500 3114 -999 3514 1282 2434 2818 2 4042 3084 3108 3150 -999 3100 1531 2914 3819 4124 4274 4471 3 6015 6123 6113 -999 6100 6200 6186 6132 -999 4231 6039 6215 ; run; %macro rename2(oldvarlist, suffix); %let k=1; %let old = %scan(&amp;oldvarlist, &amp;k); %do %while(&quot;&amp;old&quot; NE &quot;&quot;); rename &amp;old = &amp;old.&amp;suffix; %let k = %eval(&amp;k + 1); %let old = %scan(&amp;oldvarlist, &amp;k); %end; %mend; data a ; set faminc; %rename2(faminc1 faminc2, _new); run; proc print data = a heading= h noobs; run; 2.5.8 Rename array variables data faminc; input famid faminc1-faminc12 ; cards; 1 3281 3413 3114 2500 2700 3500 3114 -999 3514 1282 2434 2818 2 4042 3084 3108 3150 -999 3100 1531 2914 3819 4124 4274 4471 3 6015 6123 6113 -999 6100 6200 6186 6132 -999 4231 6039 6215 ; run; %macro rename3(oldprefix, newprefix, num); %let k=1; %do %while(&amp;k &lt;= &amp;num); rename &amp;oldprefix.&amp;k = &amp;newprefix.&amp;k; %let k = %eval(&amp;k + 1); %end; %mend; data a ; set faminc; %rename3(faminc, oldfaminc, 11); run; proc print data = a heading= h noobs; run; 2.6 Data utilities 2.6.1 %Scan Scan function: scan(s,n,char) means to extract the nth string from the string string with char as the delimiter, syntax (syntax) scan(s,n) When n is a positive number, extract n characters from the end of the character s scan(s,n) When n is a negative number, extract n characters from the character s scan(s,n&lt;,list-of-delimiters&gt;) If a delimiter is specified, only the delimiter will be extracted. If not specified, it will be split according to the commonly used delimiter. The default delimiter is: space. &lt;(+ &amp;! $ *); ^-/,% | etc. or a combination %macro VAC; %MACRO HL;*** Enable editor code highlighting, delete when finalising; %MEND HL; %do i = 1 %to 2; %let va_cat = CDVA CDVA_dec; %let var =&amp;i.; %let va = %SCAN (&amp;va_cat, &amp;var); data VENUS_T8_2_3_4_5_D01; set VENUS_T8_2_3_4_5_D01; by subject_id eye visit ; *** generate baseline CDVA CDVA_dec; retain base_&amp;va. ; if first.eye then base_&amp;va. = .; if first.eye and &amp;va. ne . then do; if VISIT eq 1 then base_&amp;va. = &amp;va.; end; %end;run; %mend VAC; %VAC; %macro mylogit1(all_deps); %let k=1; %let dep = %scan(&amp;all_deps, &amp;k); %do %while(&quot;&amp;dep&quot; NE &quot;&quot;); title &quot;dependent variable is &amp;dep&quot;; proc logistic data=xxx des; model &amp;dep = ind1 ind2; run; %let k = %eval(&amp;k + 1); %let dep = %scan(&amp;all_deps, &amp;k); %end; %mend; *run the program for the first three v&#39;s; %mylogit1(v1 v2 v3) %macro mylogita(indata, all_deps, indvars =, myout =_out ); %let k=1; %let dep = %scan(&amp;all_deps, &amp;k); %do %while(&amp;dep NE); title &quot;The dependent variable is &amp;dep&quot;; title2 &quot;The independent variables are &amp;indvars&quot;; proc logistic data=&amp;indata des outest=est&amp;k; model &amp;dep = &amp;indvars; run; %let k = %eval(&amp;k + 1); %let dep = %scan(&amp;all_deps, &amp;k); %end; data &amp;myout; set %do i = 1 %to &amp;k - 1; est&amp;i %end; ; run; %mend; *run the program; %mylogita(xxx, v1 v2 v3, indvars = ind1 ind2, myout = myparms) title; proc print data = myparms; var _name_ intercept ind1 ind2; run; 2.6.2 %eval and %syseval The %SYSEVALF function performs floating-point arithmetic and returns a value that is formatted using the BEST32. format. %let k = 1; %let tot = &amp;k + 1; %put &amp;tot; 1 + 1 %let tot = %eval(&amp;k + 1); %put &amp;tot; 2 %let tot = %sysevalf(&amp;k + 1.234); %put &amp;tot; 2.234 %let a = 2; %let b = 2.1; %put The result with SYSEVALF is: %sysevalf(&amp;a + &amp;b); %put BOOLEAN conversion: %sysevalf(&amp;a + &amp;b, boolean); %put INTEGER conversion: %sysevalf(&amp;a + &amp;b, integer); %put CEIL conversion: %sysevalf(&amp;a +&amp;b, ceil); %put FLOOR conversion: %sysevalf(&amp;a +&amp;b, floor); 2.6.3 Macro variable status %SYMEXIST: Used to judge whether a macro variable exists, and its parameter is the name of the macro variable. If the macro variable exists, it returns 1; otherwise, it returns 0. %let a1=1; %let re1=%symexist(a1); %let re2=%symexist(a2); %put re1=&amp;re1 re2=&amp;re2; %SYMGLOBL: Used to determine whether a macro variable is a global macro variable Check Macro Variable The DEFINED macro returns a value of 0 (false) if the argument is the name of a non-existent macro variable. It returns a 1 if the macro variable exists in the global macro environment. *MVAR The name of a macro variable; %macro defined (mvar); %local dsid rc scope; /** Open the vmacro view which contains info about macor vars **/ %let dsid=%sysfunc(open(sashelp.vmacro (where=(name=&quot;%upcase(&amp;mvar)&quot;)))); /** Fetch a record into the pdv if it exists **/ %let rc=%sysfunc(fetch(&amp;dsid)); /** Return varnum 1, the scope **/ %let scope = %sysfunc(getvarc(&amp;dsid,1)); /** Close the view **/ %let rc=%sysfunc(close(&amp;dsid)); %if &amp;scope = GLOBAL %then 1; %else 0; %mend; %global test; %let test=3; %macro testit; %if %defined(test) %then %put TEST is defined as &amp;test; %else %put TEST is undefined; %mend; %testit; %SYSMACEXIST: used to judge whether a macro program exists in the Work.SASMacr catalog, if it exists, it returns 1, otherwise it returns 0. 2.6.4 %SYSFUNC %SYSFUNC allows one to perform nearly ever SAS function on ones macro variables. %macro procA; &amp; %mend procA; %macro procB; D %mend procB; %let D = TEST; %let C=%nrstr(%procB); %let X=%str(%procA&amp;C); %put Y1 = %sysfunc(substr(&amp;X, 1)); %put Y3 = %sysfunc(substr(&amp;X, 3)); *** Solution; %procA = &amp; %procB = D &amp;D = TEST &amp;C = %nrstr(%procB) = %procB (not soloved) &amp;X = %str(%procA&amp;C) = %procA&amp;C (soloved) = &amp;%procB Y1 = %sysfunc(substr(&amp;X, 1)) = %sysfunc(substr(&amp;%procB, 1)) = &amp;%procB = &amp;D Y3 = %sysfunc(substr(&amp;X, 3)) = %sysfunc(substr(&amp;%procB, 3)) = procB 2.6.5 Quoting Function %STR%NRSTR%QUOTE%NRQUOTE%BQUOTE%NRBQUOTE%SUPERQ%UNQUOTE%QSAN%QSUBSTR%QSYSFUNC%QUPCASE 2.6.6 Call Symput The Symput and symget functions can pass information to or from the data step. When we want to get the information in the data step, there are two functions that are particularly useful. You can use symput to get the information in the data step into the macro variable, and when we want to get the information from the data in the macro variable into the data step, we will use symget. Call symput  call symput(new_macro_variable, value_in_string_format) Call symputx () will remove the spaces before and after the second parameter value symget symget(macro_variable) 2.6.6.1 Populating Macro Variables data _NULL_; set VENUS_analysis_sets_subj(where=(RD_IOL_TYP=1)) end=eof; if eof then call symputx(&#39;n_SESsubj_Lara&#39;, _n_); run; %put &amp;n_SESsubj_Tecn.; *** A set of Macro Variables; data Venus_t8_2_3_5_2_Num; merge Venus_t8_2_3_5_2_Means Venus_t8_2_3_5_2_Num_cat; by analysis_set RD_IOL_TYP subgroup visit; if RD_IOL_TYP=1 then Treatment=&quot;LARA&quot;; if RD_IOL_TYP=2 then Treatment=&quot;TECN&quot;; if N = . then N = 0; Name = &quot;Num&quot;|| &quot;_&quot; ||trim(Analysis_set)|| &quot;_&quot; ||trim(Treatment)|| &quot;_&quot; ||strip(subgroup)|| &quot;_&quot; ||put(visit,1.); do _N_=1 to 240; call symputx(Name, N); end; run; 2.6.6.2 SQL into /*** Using SQL ***/ /*** One Macro Variable ***/ PROC SQL; RESET NOPRINT; SELECT PUT(MEAN(height),4.1) INTO : avgheight FROM sashelp.class ; RESET PRINT; %PUT macro variable AVGHEIGHT: [&amp;avgheight]; /*** Two Macro Variables ***/ PROC SQL; SELECT MAX(height), MIN(height) INTO : max_height , : min_height FROM sashelp.class ; QUIT; %PUT macro variable MAX_FNAME: [&amp;max_height]; %PUT macro variable MIN_FNAME: [&amp;min_height]; /*** More Variables ***/ proc sql noprint; select name, Population into :country1 - :country4, :pop1 - :pop3 from sql.countries; %put &amp;country1 &amp;pop1; %put &amp;country2 &amp;pop2; %put &amp;country3 &amp;pop3; %put &amp;country4; /***Create macro variable in string***/ DATA _NULL_; SET thirteens END=done; LENGTH fname_string $ 9999; RETAIN fname_string; fname_string = CATX(&#39; / &#39;,fname_string,fname); IF done THEN CALL SYMPUT(&#39;fnames&#39;,TRIM(fname_string) ); RUN; %PUT FNAMES: [&amp;fnames]; /*** Outpuit: FNAMES: [Alice / Barbara / Jeffrey] ***/ PROC SQL; SELECT fname INTO : fnames SEPARATED BY &#39; / &#39; FROM thirteens ; QUIT; %PUT FNAMES: [&amp;fnames]; 2.6.7 Call Execute 2.6.7.1 data null Good way to replease %IF %THEN statements, %IF %THEN statements cannot appear in open code. These statements are legal but only within a macro definition %if &amp;city = Boston %then %do; proc means data=beantown; var pahk youh caah; run; %end; %else %if &amp;city = New York %then %do; proc means data=big_apple; var a nominal egg; run; %end; /*CALL EXECUTE is a DATA step statement that means: Run this code. */ ods html; data sales; call execute (&#39;proc print data=sales; run;&#39;); amount=5; run; data _null_; set sales end=nomore; total + amount; if nomore; if (total &lt; 1000000) then call execute(&#39; proc means data=sales; class state; var amount; title &quot;Sales by State&quot;; run; &#39;); else call execute(&#39; proc means data=sales; class state year; var amount; title &quot;Sales by State and Year&quot;; run; &#39;); run; 2.6.7.2 Split the datasets data _null_; set sashelp.class; call execute(&#39;data work.&#39;||strip(name)||&#39;; set sashelp.class; where name=&quot;&#39;||strip(name)||&#39;&quot;; run;&#39;); run; /*First observation with name Alfred*/ data work.Alfred; set sashelp.class; where name=&quot;Alfred&quot;; run; /*Second observation with name Alice*/ data work.Alice; set sashelp.class; where name=&quot;Alice&quot;; run; /*Alternative 1*/ %macro datasets(name= ); data work.&amp;name; set sashelp.class; where name=&quot;&amp;name&quot;; run; %mend datasets; data _null_; set sashelp.class; call execute(&#39;%datasets(name=&#39;||strip(name)||&#39;);&#39;); run; /*Alternative 2*/ proc sql; create table work.Vars as select name,type from dictionary.columns where memname=&quot;CLASS&quot; and libname=&quot;SASHELP&quot;; quit; %macro report(var= , type= ); %if &amp;type=char %then %do; proc freq data=sashelp.class; table &amp;var; run; %end; %else %do; proc means data=sashelp.class; var &amp;var; run; %end; %mend report; data _null_; set work.Vars; call execute(&#39;%report(var=&#39;||strip(name)||&#39; , type=&#39;||strip(type)||&#39;);&#39;); run; /*Code generated and executed by Call Execute:*/ %report(var=Age , type=num); %report(var=Sex , type=char); %report(var=Age , type=num); %report(var=Height , type=num); %report(var=Weight , type=num); 2.6.7.3 SYMGET CALL EXECUTE cannot change the currently executing DATA step. By using SYMGET, it is actually possible to work around that limitation %let pet=&quot;CAT&quot;; data test; call execute (&#39;%let pet=DOG;&#39;); animal = &amp;pet.; put animal; run; %let pet=CAT; data test; call execute (&#39;%let pet=DOG;&#39;); animal = symget(&#39;pet&#39;); put animal; run; %let value = BEFORE; data _null_; call symput(&#39;value&#39;, &#39;AFTER&#39;); /* Double quotes permit resolution of &amp;VALUE during the initial phase of the DATA step*/ /* Double Quotes: value is BEFORE.*/ call execute(&quot;%put Double Quotes: value is &amp;VALUE..;&quot;); call execute(&#39;%put Single Quotes: value is &amp;VALUE..;&#39;); run; 2.6.8 Dummy Datasets 2.6.8.1 Creating dummy datasets from tables freq data ds; female = 0; homeless = 1; count = 169; output; female = 1; homeless = 1; count = 40; output; female = 0; homeless = 0; count = 177; output; female = 1; homeless = 0; count = 67; output; run; proc freq data = ds; table homeless * female; weight count; run; data newds; set ds; do i = 1 to count; output; end; run; proc freq data = newds; table homeless * female; run; 2.6.8.2 %Expgrid: Create a data set from all combinations of factors %macro expgrid/parmbuff; %local out; %let out = _grid_; %*-- Name of output data set; %*-- Process the variable arguments, each of the form VAR = val1 val2 val2 ..., (delimited by commas) or VAR = val1 TO val2 BY val3, Create macro variables &amp;&amp;VAR1, &amp;VAR2, ... (Variable names) and &amp;VAL1, &amp;VAL2, ... (Variable values) ; %local narg arg; %let narg = 1; %let arg = %scan(&amp;syspbuff, &amp;narg, %str((,))); %do %while(%quote(&amp;arg) ^= ); %if %length(&amp;arg) &gt; 0 %then %do; %let arg&amp;narg = &amp;arg; %let var&amp;narg = %scan(&amp;arg, 1, =); %let val&amp;narg = %trim(%scan(&amp;arg, 2, =)); %*put ARG&amp;narg = &amp;arg VAR&amp;narg=&amp;&amp;var&amp;narg VAL&amp;narg=|&amp;&amp;val&amp;narg|; %end; %let narg=%eval(&amp;narg+1); %let arg=%scan(&amp;syspbuff, &amp;narg, %str((,))); %end; %let narg=%eval(&amp;narg-1); %*put NARG=&amp;narg; data &amp;out; %*-- Generate the DO statements; %do i = &amp;narg %to 1 %by -1; %if %index(%upcase(&amp;&amp;val&amp;i, %str( TO ))) %then %do; do &amp;&amp;var&amp;i = &amp;&amp;val&amp;i; %end; %else %do; %*-- Handle lists; %if %verify(&amp;&amp;val&amp;i,%str(0123456789. )) ^= 0 %then %do; length &amp;&amp;var&amp;i $8; %end; do &amp;&amp;var&amp;i = %dolist(&amp;&amp;val&amp;i) ; %end; %end; output; %*-- Generate the END statements; %do i = 1 %to &amp;narg; end; %end; run; %mend; %*-- Translate a simplified do-list to a syntactically correct one, e.g., 3 4 5 -&gt; 3,4,5 or Male Female -&gt; &#39;Male&#39;, &#39;Female&#39; ; %macro dolist(arg, split=%str( ), sep=%str(,)); %local val i j max return; %let return=; %let max=%count(&amp;arg, split=&amp;split); %do i=1 %to &amp;max; %let val=%scan(&amp;arg, &amp;i, &amp;split); %if %verify(&amp;val,0123456789.) ^= 0 %then %do; %let val = &quot;&amp;val&quot;; %end; %if &amp;i=&amp;max %then %let return=&amp;return.&amp;val; %else %let return=&amp;return.&amp;val.&amp;sep; %end; %unquote(&amp;return) %mend; %*-- Count &#39;words&#39; in a string, delimited by split; %macro count(arg, split=%str( )); %local i; %let i=0; %do %while(%length(%nrbquote(%scan(&amp;arg, &amp;i+1, &amp;split)))); %let i=%eval(&amp;i+1); %end; &amp;i %mend; %expgrid(n=1 to 2, trials=2 4 8, time=10 to 20 by 5, sex=Male Female); * generates the data step; data _grid_; do sex=&#39;Male &#39;, &#39;Female&#39;; do time= 10 to 20 by 5; do trials=2, 4, 8; n = 1 to 2; output; end; end; end; run; 2.6.9 Dummy variables with reference Given a character or discrete numeric variable, the DUMMY macro will create a dummy (0/1) variable to represent the level of the original variable in the regression model. If the original variable has c levels, (c-1) new variables will be generated (or, if FULLRANK = 0, then c variables) Var Des. DATA= The name of the input dataset. If not specified, the most recently created dataset is used. OUT= The name of the output dataset. If not specified, the new variables are appended to the input dataset. VAR= The name(s) of the input variable(s) to be dummy coded. Must be specified. The variable(s) can be character or numeric. PREFIX= Prefix(s) used to create the names of dummy variables. The default is D_. NAME= If NAME=VAL, the dummy variables are named by appending the value of the VAR= variable to the prefix. Otherwise, the dummy variables are named by appending numbers, 1, 2,  to the prefix. The resulting name must be 8 characters or less. BASE= Indicates the level of the baseline category, which is given values of 0 on all the dummy variables. BASE=FIRST specifies that the lowest value of the VAR= variable is the baseline group; BASE=LAST specifies the highest value of the variable. Otherwise, you can specify BASE=value to make a different value the baseline group. FULLRANK= 0/1, where 1 indicates that the indicator for the BASE category is eliminated. %macro dummy( data=_last_ , /* name of input dataset */ out=&amp;data, /* name of output dataset */ var= , /* variable(s) to be dummied */ base=_last_, /* base category */ prefix = D_, /* prefix for dummy variable names */ format =, /* format used to categorize variable */ name = VAL, /* VAL: variable names are D_value */ fullrank=1 /* Eliminate dummy for baseline category? */ ); %let abort = 0; %if (%length(&amp;var) = 0) %then %do; %put ERROR: DUMMY: VAR= must be specified; %let abort=1; %goto done; %end; %let base = %upcase(&amp;base); %let name = %upcase(&amp;name); %if %upcase(&amp;data) = _LAST_ %then %let data = &amp;syslast; %if %upcase(&amp;data) = _NULL_ %then %do; %put ERROR: There is no default input data set (_LAST_ is _NULL_); %let abort=1; %goto DONE; %end; options nonotes; %*-- Initialize output data set; %if &amp;out ^= &amp;data %then %do; data &amp;out; set &amp;data; %end; %let prefix = %upcase(&amp;prefix); %*-- j indexes variables, vari is the current variable name; %local j vari; %let j=1; %*-- Find the current variable name; %let vari= %scan(&amp;var, &amp;j, %str( )); %******************************************************************; %*-- Loop over variables; %******************************************************************; %do %while(&amp;vari ^= ); %*-- Find the current prefix for dummies; %let pre = %scan(&amp;prefix, &amp;j, %str( )); %if &amp;pre = VARNAME | &amp;pre = %then %let pre=&amp;vari._; %*-- Keyword BLANK for prefix indicates no prefix; %if &amp;pre=BLANK %then %let pre=; %*-- Find the current base for dummies; %let baseval = %scan(&amp;base, &amp;j, %str( )); %if &amp;baseval = %then %let baseval=_LAST_; %*-- Find the current format for dummies; %let fmt = %scan(&amp;format, &amp;j, %str( )); *-- determine values of variable to be dummied; proc summary data = &amp;out nway ; class &amp;vari ; %if %length(&amp;fmt) gt 0 %then %do; %*-- Make sure format name includes a &#39;.&#39;; %if &quot;%substr(&amp;fmt, %length(&amp;fmt))&quot; ne &quot;.&quot; %then %let fmt = &amp;fmt..; format &amp;vari &amp;fmt; %end; output out = _cats_ ( keep = &amp;vari ) ; %if &amp;syserr &gt; 4 %then %let abort=1; %if &amp;abort %then %goto DONE; %if &amp;fullrank %then %do; *-- Eliminate the base category; data _cats_; set _cats_ end=_eof_; %if &amp;baseval = _FIRST_ | &amp;baseval = LOW %then %str( if _n_ = 1 then delete;); %else %if &amp;baseval = _LAST_ | &amp;baseval = HIGH %then %str( if _eof_ then delete;); %else %str(if &amp;vari = &amp;baseval then delete;); run; %end; data _null_ ; set _cats_ nobs = numvals ; if _n_ = 1 then do; %*-- If there are no non-baseline values - abort macro; call symput(&#39;abort&#39;,trim( left( put( (numvals=0), best. ) ) ) ) ; %*-- Place number of dummies into macro variable num; call symput( &#39;num&#39;, trim( left( put( numvals, best. ) ) ) ) ; end; %*-- Number the values, place in macro variables c##; %if %length(&amp;fmt) gt 0 %then %do; call symput ( &#39;c&#39; || trim ( left ( put ( _n_, best. ) ) ), trim(left(put(&amp;vari,&amp;fmt)) ) ); %end; %else %do; call symput ( &#39;c&#39; || trim ( left ( put ( _n_, best. ) ) ), trim ( left ( &amp;vari ) ) ) ; %end; run ; %if &amp;syserr &gt; 4 %then %let abort=1; %if &amp;abort %then %goto DONE; %******************************************************************; %* Create list of dummy variables for the j-th input variable; %******************************************************************; %if &quot;&amp;name&quot; = &quot;VAL&quot; %then %do ; %*-- Names by variable value; %let vl&amp;j =; %do k=1 %to &amp;num; %if %sysevalf(&amp;sysver &lt; 7 &amp; %length(&amp;pre&amp;&amp;c&amp;k) &gt; 8) %then %do; %put ERROR: Cannot generate names longer than 8 characters; %let abort=1; %goto DONE; %end; %let vl&amp;j = &amp;&amp;vl&amp;j &amp;pre&amp;&amp;c&amp;k; %end; ; %*put vl&amp;j = &amp;&amp;&amp;vl&amp;j; data &amp;out; set &amp;out ; array __d ( &amp;num ) %do k=1 %to &amp;num ; &amp;pre&amp;&amp;c&amp;k %end ; ; %put DUMMY: Creating dummy variables &amp;pre&amp;&amp;c1 .. &amp;pre&amp;&amp;c&amp;num for &amp;vari; %end ; %else %do ; %*-- Numeric suffix names; %let vl&amp;j =; %do k=1 %to &amp;num; %if %sysevalf(&amp;sysver &lt; 7 &amp; %length(&amp;pre.&amp;k) &gt; 8) %then %do; %put ERROR: Cannot generate names longer than 8 characters; %let abort=1; %goto endloop; %end; %let vl&amp;j = &amp;&amp;vl&amp;j &amp;pre.&amp;k; %end; ; %*put vl&amp;j = &amp;&amp;&amp;vl&amp;j; run; %******************************************************************; %* Assign values to the dummy variables for the j-th input variable; %******************************************************************; data &amp;out ( rename = ( %do k=1 %to &amp;num ; d&amp;k = &amp;pre.&amp;k %end ; ) ) ; set &amp;out ; %put DUMMY: Creating dummy variables &amp;pre.1 .. &amp;pre.&amp;num; array __d ( &amp;num ) d1-d&amp;num ; %end ; %*---------------------------------------------------------; %* Handle missing values (for V7+ only); %*-- (to do this for V6.12 requires separate processing for character and numeric variables); %*---------------------------------------------------------; %if %sysevalf(&amp;sysver &gt;= 7) %then %do; if missing(&amp;vari) then do; do j=1 to &amp;num; __d(j)=.; end; return; end; %end; %*---------------------------------------------------------; %* Assign values to dummy variables; %*---------------------------------------------------------; drop j; do j = 1 to &amp;num ; /* initialize to 0 */ __d(j) = 0 ; end ; %if %length(&amp;fmt) eq 0 %then %do; %*-- Case 1: No format; if &amp;vari = &quot;&amp;c1&quot; then __d ( 1 ) = 1 ; /* create dummies */ %do i = 2 %to &amp;num ; else if &amp;vari=&quot;&amp;&amp;c&amp;i&quot; then __d ( &amp;i ) = 1 ; %end; %end; %else %do; %*-- Case 2: with format; if put(&amp;vari,&amp;fmt) = &quot;&amp;c1&quot; then __d ( 1 ) = 1 ; %do i = 2 %to &amp;num ; else if put(&amp;vari,&amp;fmt)=&quot;&amp;&amp;c&amp;i&quot; then __d ( &amp;i ) = 1; %end; %end; run ; %*-- Find the next variable; %let j=%eval(&amp;j+1); %let vari = %scan(&amp;var, &amp;j, %str( )); %*put End of loop(&amp;i): vari = &amp;vari pre=&amp;pre; %endloop: %end; /* %do %while */ %done: %if &amp;abort %then %put ERROR: The DUMMY macro ended abnormally.; options notes; %mend dummy ; data test; input y group $ sex $ @@; cards; 10 A M 12 A F 13 A M 18 B M 19 B M 16 C F 21 C M 19 C F ; proc format; value $sex &#39;M&#39;=&#39;Male&#39; &#39;F&#39;=&#39;Female&#39;; %dummy (data=test, var =sex group, format=$sex, prefix=blank varname); proc print data = test; run; \\[ \\begin{array}{|r|r|l|l|r|r|r|} \\hline \\text { Obs } &amp; \\text { y } &amp; \\text { group } &amp; \\text { sex } &amp; \\text { Female } &amp; \\text { group_A } &amp; \\text { group_B } \\\\ \\hline 1 &amp; 10 &amp; \\mathrm{~A} &amp; \\mathrm{M} &amp; 0 &amp; 1 &amp; 0 \\\\ \\hline 2 &amp; 12 &amp; \\mathrm{~A} &amp; \\mathrm{~F} &amp; 1 &amp; 1 &amp; 0 \\\\ \\hline 3 &amp; 13 &amp; \\mathrm{~A} &amp; \\mathrm{M} &amp; 0 &amp; 1 &amp; 0 \\\\ \\hline 4 &amp; 18 &amp; \\mathrm{~B} &amp; \\mathrm{M} &amp; 0 &amp; 0 &amp; 1 \\\\ \\hline 5 &amp; 19 &amp; \\mathrm{~B} &amp; \\mathrm{M} &amp; 0 &amp; 0 &amp; 1 \\\\ \\hline 6 &amp; 16 &amp; \\mathrm{C} &amp; \\mathrm{F} &amp; 1 &amp; 0 &amp; 0 \\\\ \\hline 7 &amp; 21 &amp; \\mathrm{C} &amp; \\mathrm{M} &amp; 0 &amp; 0 &amp; 0 \\\\ \\hline 8 &amp; 19 &amp; \\mathrm{C} &amp; \\mathrm{F} &amp; 1 &amp; 0 &amp; 0 \\\\ \\hline \\end{array} \\] 2.7 Check for validation 2.7.1 Check datasets exists %macro existdsn= %global exist %if %sysfuncexist&amp;dsn %then %let exist=YES %else %let exist=NO %mend exist %existdsn=Test %put &amp;exist.; 2.7.2 Check datasets and Variables %macro CheckDsVar(ds =, var =); %local dsid check rc; %let dsid = %sysfunc(open(&amp;ds.)); %if &amp;dsid=0 %then %DO; %put Warning: Dataset &amp;ds. is not exist!; %ABORT; %END; %else %do; %let check = %sysfunc(varnum(&amp;dsid., &amp;var.)); %let rc = %sysfunc(close(&amp;dsid.)); %if &amp;check. = 0 %then %DO ; %put Warning: Variable &amp;var is not exists!; %ABORT; %END; %if &amp;check. ne 0 %then %DO ; %put Congratulations! Variable &amp;var is exists!; %END; %end; %mend CheckDsVar; %CheckDsVar (ds =sashelp.class, var=height); 2.7.3 Check datasets if empty *** Check if the dataset is empty; proc sql; select count(*) into: nobs from work.VENUS_T8_1_3_1_D01_&amp;in.; quit; %put &amp;nobs.; Alternative *** Check if table is empty; %let dsid=%sysfunc(open(&amp;ds.)); %let nobs=%sysfunc(attrn(&amp;dsid.,nlobs)); %let dsid=%sysfunc(close(&amp;dsid.)); %IF &amp;nobs. eq 0 %then %do; *** If table is empty, create dummy observation; data &amp;ds.; retain description order1 n_lara p_lara n_tecn p_tecn &quot;&quot;; retain order1 0; run; %END; Deal with empty in proc report %if &amp;nobs. eq 0 %then %do; compute after; line &#39;No device deficiencies occurred during this investigation.^n&#39;; endcomp; %end; %else %if &amp;nobs. ne 0 %then %do; compute before ; line &#39; &#39;; endcomp; compute after order1; line &#39; &#39;; endcomp; %end; 2.7.4 %sysfunc get the observations %macro getNobsOf(data); proc sql noprint; select count(*) into: nobs from &amp;data; quit; %mend; %global nobs; %getNobsOf(sashelp.class); %put &amp;nobs; /* version 2 */ %macro getNobsOf(data); %local dsid; %local nobs; %local rc; %let dsid = %sysfunc(open(&amp;data)); %let nobs = %sysfunc(attrn(&amp;dsid, nobs)); %let rc = %sysfunc(close(&amp;dsid)); &amp;nobs %mend getNobsOf; %let nobs = %getNobsOf(sashelp.class); %put &amp;nobs; 2.8 Log 2.8.1 %LogReader Automatic readout of the Log window and automatic storage of the Log as a txt-file. read_txt: dataset including string (Error/Warning/Note message) type (Error, Warning or Note) dataset step (data step in which the message has occurred) Line (Number of the line ABOVE the message) ********************************************************** *** define the Path_log and FileName, where the txt-file of Log Window *** should be saved **********************************************************; %let Path_log = Z:\\CDISC\\STUDIES\\02_LogReader; /* adapt */ %let FileName = log_message.txt; ********************************************************** *** save the log to an external file **********************************************************; Dm &#39;log; print file = &quot;&amp;Path_log\\&amp;FileName&quot; replace&#39;; ********************************************************** *** The next DATA step is used to read in the newly created *** text file a line at a time scanning for keywords and DATA *** step names. **********************************************************; data read_txt; infile &quot;&amp;Path_log\\&amp;FileName&quot; truncover lrecl= 200; length string1 $ 200 type $ 10 ; retain dsstep NewLine NewStr; input @1 string1 $char200.; /* keep number of the line ABOVE the message */ Line = substr(string1, 1, 5); IntLine = input(Line,?? 5.); *** converts the character value &quot;Line&quot; to integer; *** sets IntLine as missing, when &quot;Line&quot; is no number; *** Caution: if &quot;Line&quot; is no number, &quot;NOTE: Invalid argument to function INPUT at line...&quot; will be produced; *** ?? suppresses the above-named NOTE; * if Line notin (&quot; &quot;, &quot;ERRO&quot;, &quot;NOTE&quot;, &quot;WARN&quot;) then do; if IntLine ne . then do; NewLine = IntLine; end; drop IntLine; /* include data find, cut out, mark */ Str = index(String1,&quot;%include&quot;); if Str &gt; 0 then do; NewStr = scan(string1, -1, &quot;\\&quot;); NewStr = scan(NewStr, 1, &quot;.&quot;); end; *********************************************************** *** The DATA step name is stored as a field for ease of tracing *** back where in the code the NOTE or WARNING or ERROR message *** was found. To locate the DATA step name, the program looks *** for the word data as the second word in each SAS statement *** excluding the lines that begin with NOTE, WARNING or ERROR. *** To compensate for any combination of mixed case spelling of *** data, the contents of the second string word is upcased before *** being stored in the DATA step name field and then evaluated for *** a word match. After the DATA statement is located, the starting *** position of the word DATA is stored in the field strt_txt. *** This is necessary because log line numbers vary in length, which *** shift the starting position of the word DATA in the DATA step statement **********************************************************; If substr(string1,1,4) notin (&#39;NOTE&#39; &#39;WARNING&#39; &#39;ERROR&#39;) then do; word = upcase(scan(string1,2)); end; if word= &#39;DATA&#39; then do; strt_txt= length(scan(string1,1)) + 1; dsstep = trim(left(substr(string1,strt_txt))); end; ************************************************************ *** The next statements are used to identify the keywords ERROR, WARNING *** or NOTE. In this code, all WARNING and ERROR messages were output for *** review. The NOTE line generated by SAS not only contains possible problems *** but informative SAS data and processing messages that we do not want to *** capture here ************************************************************; if substr(string1,1,5) =&#39;ERROR&#39; then do; type=&#39;ERROR&#39;; output; end; else if substr(string1,1,7) = &#39;WARNING&#39; then do; type=&#39;WARNING&#39;; output; end; else if substr(string1,1,4) = &#39;NOTE&#39; then do; note1=index(string1,&#39;stopped&#39;); *** NOTE: &quot;The SAS System stopped processing this step because of errors; note2=index(string1,&#39;converted&#39;); *** NOTE: &quot;Numeric values have been converted&quot; or &quot;Character values have been converted&quot;; note3=index(string1,&#39;uninitialized&#39;); *** NOTE: &quot; the variable  is uninitialized&quot;; note4=index(string1,&#39;division by zero&#39;); *** NOTE: &quot; division by zero detected&quot;; note5=index(string1,&#39;Invalid&#39;); *** NOTE: &quot; Invalid argument &quot; or &quot; invalid data&quot;; note6=index(string1,&#39;Missing&#39;); *** NOTE: &quot;Missing values were generated as a result of performing an operation on missing values&quot;; note7=index(string1, &quot;is already on the library&quot;); *** NOTE: &quot;is already on the library&quot;; note8=index(string1, &quot; 0 observations&quot;); *** NOTE: &quot;The data set .. has 0 observations and .. variables&quot;; note9=index(string1, &quot; 0 variables&quot;); *** NOTE: &quot;0 variables&quot;; note10=index(string1, &quot;MERGE statement&quot;); *** NOTE: &quot;MERGE statement&quot;; note11=index(string1, &quot;at least one W.D.&quot;); *** NOTE: &quot; at least one W.D. &quot;; note12=index(string1, &quot;no statistics&quot;); *** NOTE: &quot; no statistics are computed &quot;; note13=index(string1, &quot;overwritten&quot;); *** NOTE: &quot; variable  on data set  will be overwritten&quot;; note14=index(string1, &quot;NOSPOOL&quot;); *** NOTE: &quot;NOSPOOL is on&quot;; note15=index(string1, &quot;Mathematical&quot;); *** NOTE: &quot;Mathematical operations could not be performed... The results of the operation have been set to missing values&quot;; note16=index(string1, &quot;LOST CARD&quot;); *** NOTE: LOST CARD; note17=index(string1, &quot;new line&quot;); *** NOTE: SAS went to a new line; note18=index(string1, &quot;outside the axis range&quot;); *** NOTE: outside the axis range; if note1 gt 0 or note2 gt 0 or note3 gt 0 or note4 gt 0 or note5 gt 0 or note6 gt 0 or note7 gt 0 or note8 gt 0 or note9 gt 0 or note10 gt 0 or note11 gt 0 or note12 gt 0 or note13 gt 0 or note14 gt 0 or note15 gt 0 or note16 gt 0 or note17 gt 0 or note18 gt 0 then do; type=&#39;NOTE&#39;; output; end; end; drop note1-note18 strt_txt word Line Str; rename NewLine = Line NewStr = Include; run; *ods html; proc print data=Read_txt; run; *ods html close; 2.9 Proc Transpose 2.9.1 numeric proc transpose data=have out=t; by id name firmid; var _numeric_; run; 2.9.2 In processing 2.10 Clean Up 2.10.1 Basic setting Cleaning OUTPUT SCREEN and LOG dm log &quot;clear&quot;; dm output &quot;clear&quot;; Alternatively, you can use a different DM statement that will not only clear the output screen but will also remove any leftover residue in the results window. dm odsresults clear; Cleaning LIBNAME references libname &amp;&amp;new&amp;i clear; Cleaning TITLES and FOOTNOTES title1; footnote1; 2.10.2 Delete datasets Deleting with PROC SQL proc sql; drop table work.Venus_t8_2_3_9_2_d03_:, work.Venus_t8_2_3_9_2_d04_:; quit; Deleting with PROC DELETE proc delete data=work.Venus_t8_2_3_9_2_d03 work.Venus_t8_2_3_9_2_d04; run; Deleting with PROC Datasets proc datasets lib=work nolist; delete Venus_t8_2_3_9_2_d03_: ; quit; Delete All Data Sets from a Library proc datasets library=library-name kill nolist; quit; 2.10.3 Deleting Formats Delete Numeric Format proc format; value eye 1 = &quot;OD&quot; 2 = &quot;OS&quot;; value visit 1 =&quot;Screening&quot; 2 =&quot;Surgery&quot; 3 =&quot;D1&quot; 4 =&quot;W1&quot; 5 =&quot;M1&quot; 6 =&quot;M4-6&quot; 99 =&quot;Unscheduled&quot;; run; proc catalog catalog=work.formats; delete visit.format eye.format ; run; Delete Character Format proc format; value $ enrolled &#39;n_Screened&#39; = &#39;Screened&#39; &#39;n_enrolled&#39; = &#39;Randomized&#39; &#39;n_screen_failure&#39; = &#39;Randomization failure&#39; &#39;n_implanted_1&#39; = &#39;1^{super st} eye implanted&#39; &#39;n_implanted_2&#39; = &#39;2^{super nd} eye implanted&#39; &#39;n_One_eye_eligible&#39; = &#39;Only one eligible eye&#39; &#39;n_SES&#39; = &#39;Safety population&#39; &#39;n_ITT&#39; = &#39;modified Intention to Treat population&#39; &#39;n_PP&#39; = &#39;Per-protocol population^n&#39; &#39;n_completed_study&#39; = &#39;Completed study&#39; &#39;n_discontinued&#39; =&#39;Discontinued^n&#39; other=[$250.]; run; proc catalog catalog=work.formats; delete Enrolled.formatc; run; 2.10.4 Remove assigned formats format all will delete all the formats in the SAS dataset. PROC DATASETS lib=work; MODIFY dsn; FORMAT _all_; INFORMAT _all_; RUN; QUIT; remove only the formats and informats of specific variables in the SAS dataset. Proc DataSets Lib = Work; Modify dsn; Format heigt weight sex; Run ; Quit ; delete formats/informats of all character or numeric variables proc datasets lib=work; modify dsn; format _char_; *format _num_; run; Quit; 2.10.5 Delete macro variables %macro deleteALL; options nonotes; %local vars; proc sql noprint; select name into: vars separated by &#39; &#39; from dictionary.macros where scope=&#39;GLOBAL&#39; and not name contains &#39;SYS_SQL_IP_&#39; and not name contains (&#39;STUDY&#39;) and not name contains (&#39;REPORT&#39;) and not name contains (&#39;SPONSOR&#39;) and not name contains (&#39;SYSRANDOM&#39;) ; quit; %put &amp;vars.; %symdel &amp;vars; options notes; %put NOTE: Macro variables deleted.; %mend deleteALL; Alternative proc sql noprints; select name into:mymacrovars separated by &#39;&#39; from dictionary.macros where scope = &#39;GLOBAL&#39;; quit; %symdel &amp;mymacrovars mymacrovars; 2.10.6 Delete Macro With specifying the macro proc catalog cat=work.sasmacr; delete macro_name / et=macro; quit; proc catalog catalog = work.sasmacr kill force; run; Reset all %macro /**************************************************************************** Reset all %macro: Deletes a macro definition from the Work.SASMacr catalog.; Use DELETE parameter to list macro names to delete. Use KEEP parameter to list macro names to NOT delete. Calling it with no values will delete all macros not currently running. ****************************************************************************/ %macro macdelete(delete,keep); %local libname memname objname objtype fid i; %do i=1 %to %sysmexecdepth; %let keep=%sysmexecname(&amp;i) &amp;keep; %end; %if %length(&amp;delete) %then %let delete=and findw(&quot;&amp;delete&quot;,objname,&#39;,&#39;,&#39;sit&#39;); %let fid=%sysfunc(open( sashelp.vcatalg(keep=libname memname objname objtype where=(libname=&#39;WORK&#39; and objtype=&#39;MACRO&#39; and memname like &#39;SASMAC_&#39; and not findw(&quot;&amp;keep&quot;,objname,&#39;,&#39;,&#39;sit&#39;) &amp;delete)))); %if (&amp;fid) %then %do; %syscall set(fid); %do %while(0=%sysfunc(fetch(&amp;fid))); %put %sysfunc(compbl(Removing &amp;objname from &amp;libname catalog &amp;memname)); %sysmacdelete &amp;objname; %end; %let fid=%sysfunc(close(&amp;fid)); %end; %else %put %qsysfunc(sysmsg()); %mend macdelete; %macdelete; "]]
