geom_point(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="darkred") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#660000") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#A4A4A4") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#e5f5f9") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#2ca25f") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="darkred") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
## plot(economics$uempmed, x=economics$date, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ggplot(data = economics) +
geom_point(mapping = aes(x = date, y = smoothed10), color="#fc9272") +
geom_point(mapping = aes(x = date, y = smoothed25), color="#de2d26") +
geom_smooth(mapping = aes(x = date, y = smoothed10), color="#fc9272", fill=NA) +
geom_smooth(mapping = aes(x = date, y = smoothed25), color="#de2d26", fill=NA) +
theme_bw()+
labs(y="Unemployment (Median)",
x="Date",
title="Loess Smoothing and Prediction")
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
### Sample Path of an AR(1) Process
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
par(mfrow = c(2,1))
plot(arima.sim(list(order=c(0,0,1), ma=.9), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
plot(arima.sim(list(order=c(0,0,1), ma=-.9), n=100), ylab="x",
main=(expression(MA(1)~~~theta==-.5)))
data(melsyd)
data(fpp::melsyd)
install.packages("fpp")
data(fpp::melsyd)
require(fpp)
data(melsyd)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
library(ggplot2)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
data(a10)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
str(a10)
a10
head(a10)
### A useful variation on the seasonal plot uses polar coordinates. Setting polar=TRUE makes the time series axis circular rather than horizontal, as shown below.
ggseasonplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggsubseriesplot(a10) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
ggsubseriesplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
ggsubseriesplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
## To see the relationships between these five time series, we can plot each time series against the others. These plots can be arranged in a scatterplot matrix
GGally::ggpairs(as.data.frame(visnights[,1:5]))
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
data(visnights)
data(visnights)
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
install.packages("fpp2")
library(fpp2)
data(visnights)
autoplot(visnights[,1:5], facets=TRUE) +
ylab("Number of visitor nights each quarter (millions)")
## To see the relationships between these five time series, we can plot each time series against the others. These plots can be arranged in a scatterplot matrix
GGally::ggpairs(as.data.frame(visnights[,1:5]))
library(fpp)
data(ausbeer)
beer2 <- window(ausbeer, start=1992)
gglagplot(beer2)
ggAcf(beer2)
beer2
ggAcf(beer2)
data(elec)
ggAcf(beer2)
data(elec)
aelec <- window(elec, start=1980)
ggAcf(aelec, lag=48)
set.seed(30)
y <- ts(rnorm(50))
autoplot(y) + ggtitle("White noise")
ggAcf(y)+ ggtitle("Autocorrelation function for the white noise series.")
#Loading the Data Set
data("AirPassengers")
#This tells you that the data series is in a time series format
is.ts(AirPassengers)
#Starting index, end index
start(AirPassengers)
AirPassengers
time(AirPassengers)
#This will print the cycle across years.
frequency(AirPassengers)
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
abline(reg=lm(AirPassengers~time(AirPassengers)))+
xlab("Year") +
ylab("Number of Passengers")
reg=lm(AirPassengers~time(AirPassengers))
reg=lm(AirPassengers~time(AirPassengers))
reg
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
autolayer(reg)+
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
reg=lm(AirPassengers~time(AirPassengers))
reg$coefficients
reg$coefficients[1]
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
###  the autoplot() command frequently. It automatically produces an appropriate plot of whatever you pass to it in the first argument. In this case, it recognises melsyd[,"Economy.Class"] as a time series and produces a time plot.
reg=lm(AirPassengers~time(AirPassengers))
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1]) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
autoplot(AirPassengers) +
geom_abline(slope = reg$coefficients[2], intercept = reg$coefficients[1])
autoplot(AirPassengers) +
ylim(0, 600) +
ggtitle("Monthly totals of international airline passengers, 1949-1960") +
xlab("Year") +
ylab("Number of Passengers")
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
acf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggacf(AirPassengers)
## ACF help us determine what type of series we have, whether it is a White noise, Random walk, Auto regressive or Moving average.
ggAcf(AirPassengers)
## Fit the AR model to AirPassengers
## Note for reference that an AR model is an ARIMA(1, 0, 0) model.
AR <- arima(AirPassengers, order = c(1,0,0))
print(AR)
?autoplot
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
install.packages("ggfortify")
library(zoo)
library(tseries)
library(ggplot2)
library(ggfortify)
AR_fit <- AirPassengers - residuals(AR)
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red")) +
aes(linetype = plot_group,
size = plot_group) +
scale_linetype_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2)) +
scale_size_manual(labels = c("Actual", "Forecasted"),
values = c(1, 2))
autoplot(ts.union(AirPassengers, AR_fit), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "red"))
#Using predict() to make a 1-step forecast
predict_AR <- predict(AR)
#Obtaining the 1-step forecast using $pred[1]
predict_AR$pred[1]
#ALternatively Using predict to make 1-step through 10-step forecasts
predict(AR, n.ahead = 10)
MA <- arima(AirPassengers, order = c(0,0,1))
print(MA)
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue"))
autoplot(ts.union(AirPassengers, AirPassengers - resid(MA)), facets = FALSE) +
scale_color_manual(labels = c("Actual", "Forecasted"),
values=c("black", "blue")) +
ggtitle("Plotting the series along with the MA fitted values") +
xlab("Year") +
ylab("Number of Passengers")
# Find correlation between AR_fit and MA_fit
cor(AR_fit, MA_fit)
MA_fit <- AirPassengers - resid(MA)
cor(AR_fit, MA_fit)
AIC(MA)
BIC(AR)
install.packages("bayess")
library(bayess)
demo(Chapter.1)
vnames=names(caterpillar)
par(mfrow=c(2,4),mar=c(4.2,2,2,1.2))
for (i in 1:8) plot(X[,i],y,xlab=vnames[i],pch=19,
col="sienna4",xaxt="n",yaxt="n")
## Demo code https://rdrr.io/cran/bayess/f/
data(caterpillar)
y=log(caterpillar$y)
X=as.matrix(caterpillar[,1:8])
vnames=names(caterpillar)
par(mfrow=c(2,4),mar=c(4.2,2,2,1.2))
for (i in 1:8) plot(X[,i],y,xlab=vnames[i],pch=19,
col="sienna4",xaxt="n",yaxt="n")
library(bayess)
data(caterpillar)
X=scale(X)
summary(lm(y~X))
S=readline(prompt="Type  <Return>   to continue : ")
y=log(caterpillar$y)
X=as.matrix(caterpillar[,1:8])
data(caterpillar)
X=scale(X)
summary(lm(y~X))
S=readline(prompt="Type  <Return>   to continue : ")
library("xlsx")
install.packages("xlsx")
library("xlsx")
read.xlsx2("results-text.xlsx", sheetIndex, header=TRUE, colClasses="character")
library(readxl)
Project_full <- read_excel("results-text.xlsx")
read.xlsx2("./results-text.xlsx", sheetIndex, header=TRUE, colClasses="character")
Project_full <- read_excel("C:\\Users\\zbai\\Documents\\GitHub\\R-Projects\\SAS\\Yimengresults-text.xlsx")
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimengresults-text.xlsx")
?read_excel
Project_full <- read_excel(readxl_example("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimengresults-text.xlsx"))
Project_full <- read_excel(readxl_example("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx"))
library(readxl)
Project_full <- results_text <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
Project_full$ImpfZust
Project1 <- subset(Project_full,"ImpfZust")
?subset
Project1 <- subset(Project_full,ImpfZust)
Project1 <- subset(Project_full,c(ImpfZust))
Project1 <- subset(Project_full,select = c(ImpfZust))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
ImpGrund[beruf],ImpGrund[risiko],ImpGrund[norm],
ImpGrund[gesfam],ImpGrund[sozum],ImpGrund[gesell],
ImpGrund[geswesent]))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
sex, age,
Schulab, BerufAb, ErwerbStat, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, ErwerbStat, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes, TaetGesBer))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo))
Project_full$`GesuwiEin[Bund]`
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GeszwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk))
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk))
str(Project1)
table(Project1$`Anam[HepB]`)
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja","Ja","Nein")
table(Project1$ImpfHistory)
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja","Nein")
table(Project1$ImpfHistory)
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,
`Anam[Keine]`))
table(Project1$`GesuwiEin[Bund]`)
